#!/usr/bin/python3
# Copyright (c) 2023, California Institute of Technology ("Caltech").
# U.S. Government sponsorship acknowledged. Any commercial use must be 
# negotiated with the Office of Technology Transfer at the California 
# Institute of Technology.
# 
# This software may be subject to U.S. export control laws. By accepting this 
# software, the user agrees to comply with all applicable U.S. export laws 
# and regulations. User has the responsibility to obtain export licenses, or 
# other export authority as may be required before exporting such information 
# to foreign countries or providing access to foreign persons.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions must reproduce the above copyright notice, this list of
#   conditions and the following disclaimer in the documentation and/or other
#   materials provided with the distribution.
# * Neither the name of Caltech nor its operating division, the Jet Propulsion
#   Laboratory, nor the names of its contributors may be used to endorse or
#   promote products derived from this software without specific prior written
#   permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""
TRK234: A module to read TRK 2-34 files.

components file. This file contains each individual SFDU component, including
the label, aggregation CHDO, primary CHDO, secondary CHDOs and tracking
CHDOs.

Most of this file is automatically generated from the TRK 2-34 SIS.

Author: Dustin Buccino
Email: dustin.r.buccino@jpl.nasa.gov
Affiliation: Planetary Radar and Radio Sciences, Group 332K
             Jet Propulsion Laboratory, California Institute of Technology
Date Created: 03-SEP-2015
Last Modified: 14-SEP-2023

"""

import sys
import re
import struct
from datetime import datetime, timedelta
from .util import bands, data_descriptions, format_codes

# ---------------------------------------------------------------------------
class SFDULabel:
   """
      Read/decode an SFDU Label
   """

   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.control_auth_id = ''
      self.sfdu_version_id = ''
      self.sfdu_class_id = ''
      self.reserve2 = ''
      self.data_description_id = ''
      self.sfdu_length = -1

   def __str__(self):
      """ print string """
      out  = '     control_auth_id = %s \n' % self.control_auth_id
      out += '     sfdu_version_id = %s \n' % self.sfdu_version_id
      out += '       sfdu_class_id = %s \n' % self.sfdu_class_id
      out += '            reserve2 = %s \n' % self.reserve2
      out += ' data_description_id = %s (%s) \n' % \
               (self.data_description_id, self.data_description)
      out += '         sfdu_length = %i\n' % self.sfdu_length
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # control_auth_id: 4 character string, bytes 0-4
      self.control_auth_id = struct.unpack('>4s', sfdu_block[0:4])[0]

      # sfdu_version_id: 1 character, byte 4
      self.sfdu_version_id = struct.unpack('>c', sfdu_block[4:5])[0]

      # sfdu_class_id: 1 character, byte 5
      self.sfdu_class_id = struct.unpack('>c', sfdu_block[5:6])[0]

      # reserve2: 2 character string, byte 6-8
      self.reserve2 = struct.unpack('>2s', sfdu_block[6:8])[0]

      # data_description_id: 4 character string, bytes 8-12
      self.data_description_id = struct.unpack('>4s', sfdu_block[8:12])[0].decode('ascii')

      # sfdu_length: 8 byte integer, bytes 12-20
      self.sfdu_length = struct.unpack('>Q', sfdu_block[12:20])[0]

      # POST-PROCESS: convert the data_description_id to a string
      try:
         self.data_description = data_descriptions[self.data_description_id]
      except KeyError:
         self.data_description = 'UNKNOWN'

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class SFDUAggCHDO:
   """
      Read/decode an SFDU Aggregation CHDO Label
   """

   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1

   def __str__(self):
      """ print string """
      out  = '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte integer, bytes 20-22
      self.chdo_type = struct.unpack('>H', sfdu_block[20:22])[0]
      
      # chdo_length: 2 byte integer, bytes 22-24
      self.chdo_length = struct.unpack('>H', sfdu_block[22:24])[0]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class PrimaryCHDO:
   """
      Read/decode an SFDU Primary CHDO Label
   """



   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.mjr_data_class = -1
      self.mnr_data_class = -1
      self.mission_id = -1
      self.format_code = -1
      self.format = ''

   def __str__(self):
      """ print string """
      out  = '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '      mjr_data_class = %i \n' % self.mjr_data_class
      out += '      mnr_data_class = %i \n' % self.mnr_data_class
      out += '          mission_id = %i \n' % self.mission_id
      out += '         format_code = %i (%s) \n' % \
            ( self.format_code, self.format )
      return out


   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte integer, bytes 24-26
      self.chdo_type = struct.unpack('>H', sfdu_block[24:26])[0]

      # chdo_length: 2 byte integer, bytes 26-28
      self.chdo_length = struct.unpack('>H', sfdu_block[26:28])[0]

      # mjr_data_class: 1 byte integer, byte 28
      self.mjr_data_class = struct.unpack('>B', sfdu_block[28:29])[0]

      # mnr_data_class: 1 byte integer, byte 29
      self.mnr_data_class = struct.unpack('>B', sfdu_block[29:30])[0]

      # mission_id: 1 byte integer, byte 30
      self.mission_id = struct.unpack('>B', sfdu_block[30:31])[0]

      # format_code: 1 byte integer, byte 31
      self.format_code = struct.unpack('>B', sfdu_block[31:32])[0]

      # POST-PROCESSING: decode the format string
      self.format = format_codes[self.format_code]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class UplinkCHDO:
   """
      Read/decode an SFDU Secondary CHDO for TRK 2-34

      Type C123: uplink CHDO
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.orig_id = -1
      self.last_modifier_id = -1
      self.reserve1 = -1
      self.scft_id = -1
      self.upl_rec_seq_num = -1
      self.rec_seq_num = -1
      self.year = -1
      self.doy = -1
      self.sec = -1
      self.rct_day = -1
      self.rct_msec = -1
      self.ul_dss_id = -1
      self.ul_band = -1
      self.ul_assembly_num = -1
      self.transmit_num = -1
      self.transmit_stat = -1
      self.transmit_mode = -1
      self.cmd_modul_stat = -1
      self.rng_modul_stat = -1
      self.fts_vld_flag = -1
      self.reserve1a = -1
      self.transmit_time_tag_delay = -1
      self.ul_zheight_corr = -1
      self.mod_day = -1
      self.mod_msec = -1
      self.version_num = -1
      self.sub_version_num = -1
      self.sub_sub_version_num = -1
      self.reserve1b = -1
      self.reserve4 = -1

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '             orig_id = %i \n' % self.orig_id
      out += '    last_modifier_id = %i \n' % self.last_modifier_id
      out += '            reserve1 = %s \n' % self.reserve1
      out += '             scft_id = %i \n' % self.scft_id
      out += '     upl_rec_seq_num = %i \n' % self.upl_rec_seq_num
      out += '         rec_seq_num = %i \n' % self.rec_seq_num
      out += '                year = %i \n' % self.year
      out += '                 doy = %i \n' % self.doy
      out += '                 sec = %f \n' % self.sec
      out += '             rct_day = %i \n' % self.rct_day
      out += '            rct_msec = %i \n' % self.rct_msec
      out += '           ul_dss_id = %i \n' % self.ul_dss_id
      out += '             ul_band = %i \n' % self.ul_band
      out += '     ul_assembly_num = %i \n' % self.ul_assembly_num
      out += '        transmit_num = %i \n' % self.transmit_num
      out += '       transmit_stat = %i \n' % self.transmit_stat
      out += '       transmit_mode = %i \n' % self.transmit_mode
      out += '      cmd_modul_stat = %i \n' % self.cmd_modul_stat
      out += '      rng_modul_stat = %i \n' % self.rng_modul_stat
      out += '        fts_vld_flag = %i \n' % self.fts_vld_flag
      out += '           reserve1a = %s \n' % self.reserve1a
      out += 'transmit_time_tag_delay = %f \n' % self.transmit_time_tag_delay
      out += '     ul_zheight_corr = %e \n' % self.ul_zheight_corr
      out += '             mod_day = %i \n' % self.mod_day
      out += '            mod_msec = %i \n' % self.mod_msec
      out += '         version_num = %i \n' % self.version_num
      out += '     sub_version_num = %i \n' % self.sub_version_num
      out += ' sub_sub_version_num = %i \n' % self.sub_sub_version_num
      out += '           reserve1b = %s \n' % self.reserve1b
      out += '            reserve4 = %s \n' % self.reserve4
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 32-34
      self.chdo_type = struct.unpack('>H', sfdu_block[32:34])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 34-36
      self.chdo_length = struct.unpack('>H', sfdu_block[34:36])[0]

      # orig_id: 1 byte UnsignedByte, bytes 36-37
      self.orig_id = struct.unpack('>B', sfdu_block[36:37])[0]

      # last_modifier_id: 1 byte UnsignedByte, bytes 37-38
      self.last_modifier_id = struct.unpack('>B', sfdu_block[37:38])[0]

      # reserve1: 1 byte UnsignedByte, bytes 38-39
      self.reserve1 = sfdu_block[38:39]

      # scft_id: 1 byte UnsignedByte, bytes 39-40
      self.scft_id = struct.unpack('>B', sfdu_block[39:40])[0]

      # upl_rec_seq_num: 4 byte UnsignedMSB4, bytes 40-44
      self.upl_rec_seq_num = struct.unpack('>I', sfdu_block[40:44])[0]

      # rec_seq_num: 4 byte UnsignedMSB4, bytes 44-48
      self.rec_seq_num = struct.unpack('>I', sfdu_block[44:48])[0]

      # year: 2 byte UnsignedMSB2, bytes 48-50
      self.year = struct.unpack('>H', sfdu_block[48:50])[0]

      # doy: 2 byte UnsignedMSB2, bytes 50-52
      self.doy = struct.unpack('>H', sfdu_block[50:52])[0]

      # sec: 8 byte IEEE754MSBDouble, bytes 52-60
      self.sec = struct.unpack('>d', sfdu_block[52:60])[0]

      # rct_day: 2 byte UnsignedMSB2, bytes 60-62
      self.rct_day = struct.unpack('>H', sfdu_block[60:62])[0]

      # rct_msec: 4 byte UnsignedMSB4, bytes 62-66
      self.rct_msec = struct.unpack('>I', sfdu_block[62:66])[0]

      # ul_dss_id: 1 byte UnsignedByte, bytes 66-67
      self.ul_dss_id = struct.unpack('>B', sfdu_block[66:67])[0]

      # ul_band: 1 byte UnsignedByte, bytes 67-68
      self.ul_band = struct.unpack('>B', sfdu_block[67:68])[0]

      # ul_assembly_num: 1 byte UnsignedByte, bytes 68-69
      self.ul_assembly_num = struct.unpack('>B', sfdu_block[68:69])[0]

      # transmit_num: 1 byte UnsignedByte, bytes 69-70
      self.transmit_num = struct.unpack('>B', sfdu_block[69:70])[0]

      # transmit_stat: 1 byte UnsignedByte, bytes 70-71
      self.transmit_stat = struct.unpack('>B', sfdu_block[70:71])[0]

      # transmit_mode: 1 byte UnsignedByte, bytes 71-72
      self.transmit_mode = struct.unpack('>B', sfdu_block[71:72])[0]

      # cmd_modul_stat: 1 byte UnsignedByte, bytes 72-73
      self.cmd_modul_stat = struct.unpack('>B', sfdu_block[72:73])[0]

      # rng_modul_stat: 1 byte UnsignedByte, bytes 73-74
      self.rng_modul_stat = struct.unpack('>B', sfdu_block[73:74])[0]

      # fts_vld_flag: 1 byte UnsignedByte, bytes 74-75
      self.fts_vld_flag = struct.unpack('>B', sfdu_block[74:75])[0]

      # reserve1a: 1 byte UnsignedByte, bytes 75-76
      self.reserve1a = sfdu_block[75:76]

      # transmit_time_tag_delay: 8 byte IEEE754MSBDouble, bytes 76-84
      self.transmit_time_tag_delay = struct.unpack('>d', sfdu_block[76:84])[0]

      # ul_zheight_corr: 4 byte IEEE754MSBSingle, bytes 84-88
      self.ul_zheight_corr = struct.unpack('>f', sfdu_block[84:88])[0]

      # mod_day: 2 byte UnsignedMSB2, bytes 88-90
      self.mod_day = struct.unpack('>H', sfdu_block[88:90])[0]

      # mod_msec: 4 byte UnsignedMSB4, bytes 90-94
      self.mod_msec = struct.unpack('>I', sfdu_block[90:94])[0]

      # version_num: 1 byte UnsignedByte, bytes 94-95
      self.version_num = struct.unpack('>B', sfdu_block[94:95])[0]

      # sub_version_num: 1 byte UnsignedByte, bytes 95-96
      self.sub_version_num = struct.unpack('>B', sfdu_block[95:96])[0]

      # sub_sub_version_num: 1 byte UnsignedByte, bytes 96-97
      self.sub_sub_version_num = struct.unpack('>B', sfdu_block[96:97])[0]

      # reserve1b: 1 byte UnsignedByte, bytes 97-98
      self.reserve1b = sfdu_block[97:98]

      # reserve4: 4 byte UnsignedMSB4, bytes 98-102
      self.reserve4 = sfdu_block[98:102]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class DownlinkCHDO:
   """
      Read/decode an SFDU Secondary CHDO for TRK 2-34

      Type C124: downlink CHDO
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.orig_id = -1
      self.last_modifier_id = -1
      self.reserve1 = ''
      self.scft_id = -1
      self.dtt_rec_seq_num = -1
      self.rec_seq_num = -1
      self.year = -1
      self.doy = -1
      self.sec = -1
      self.rct_day = -1
      self.rct_msec = -1
      self.dl_dss_id = -1
      self.dl_band = -1
      self.dl_chan_num = -1
      self.prdx_mode = -1
      self.ul_prdx_stn = -1
      self.ul_band_dl = -1
      self.array_delay = -1
      self.fts_vld_flag = -1
      self.carr_lock_stat = -1
      self.array_flag = -1
      self.polarization = -1
      self.diplxr_stat = -1
      self.lna_num = -1
      self.rf_if_chan_num = -1
      self.if_num = -1
      self.rcv_time_tag_delay = -1
      self.dl_zheight_corr = -1
      self.vld_ul_stn = -1
      self.vld_dop_mode = -1
      self.vld_scft_coh = -1
      self.scft_transpd_lock = -1
      self.scft_transpd_num = -1
      self.reserve1a = ''
      self.scft_osc_freq = -1
      self.scft_transpd_delay = -1
      self.scft_transpd_turn_num = -1
      self.scft_transpd_turn_den = -1
      self.scft_twnc_stat = -1
      self.scft_osc_type = -1
      self.mod_day = -1
      self.mod_msec = -1
      self.version_num = -1
      self.sub_version_num = -1
      self.sub_sub_version_num = -1
      self.lna_corr_value = -1
      self.reserve4 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '             orig_id = %i \n' % self.orig_id
      out += '    last_modifier_id = %i \n' % self.last_modifier_id
      out += '            reserve1 = %s \n' % self.reserve1
      out += '             scft_id = %i \n' % self.scft_id
      out += '     dtt_rec_seq_num = %i \n' % self.dtt_rec_seq_num
      out += '         rec_seq_num = %i \n' % self.rec_seq_num
      out += '                year = %i \n' % self.year
      out += '                 doy = %i \n' % self.doy
      out += '                 sec = %f \n' % self.sec
      out += '             rct_day = %i \n' % self.rct_day
      out += '            rct_msec = %i \n' % self.rct_msec
      out += '           dl_dss_id = %i \n' % self.dl_dss_id
      out += '             dl_band = %i \n' % self.dl_band
      out += '         dl_chan_num = %i \n' % self.dl_chan_num
      out += '           prdx_mode = %i \n' % self.prdx_mode
      out += '         ul_prdx_stn = %i \n' % self.ul_prdx_stn
      out += '          ul_band_dl = %i \n' % self.ul_band_dl
      out += '         array_delay = %f \n' % self.array_delay
      out += '        fts_vld_flag = %i \n' % self.fts_vld_flag
      out += '      carr_lock_stat = %i \n' % self.carr_lock_stat
      out += '          array_flag = %i \n' % self.array_flag
      out += '        polarization = %i \n' % self.polarization
      out += '         diplxr_stat = %i \n' % self.diplxr_stat
      out += '             lna_num = %i \n' % self.lna_num
      out += '      rf_if_chan_num = %i \n' % self.rf_if_chan_num
      out += '              if_num = %i \n' % self.if_num
      out += '  rcv_time_tag_delay = %f \n' % self.rcv_time_tag_delay
      out += '     dl_zheight_corr = %e \n' % self.dl_zheight_corr
      out += '          vld_ul_stn = %i \n' % self.vld_ul_stn
      out += '        vld_dop_mode = %i \n' % self.vld_dop_mode
      out += '        vld_scft_coh = %i \n' % self.vld_scft_coh
      out += '   scft_transpd_lock = %i \n' % self.scft_transpd_lock
      out += '    scft_transpd_num = %i \n' % self.scft_transpd_num
      out += '           reserve1a = %s \n' % self.reserve1a
      out += '       scft_osc_freq = %f \n' % self.scft_osc_freq
      out += '  scft_transpd_delay = %e \n' % self.scft_transpd_delay
      out += 'scft_transpd_turn_num = %i \n' % self.scft_transpd_turn_num
      out += 'scft_transpd_turn_den = %i \n' % self.scft_transpd_turn_den
      out += '      scft_twnc_stat = %i \n' % self.scft_twnc_stat
      out += '       scft_osc_type = %i \n' % self.scft_osc_type
      out += '             mod_day = %i \n' % self.mod_day
      out += '            mod_msec = %i \n' % self.mod_msec
      out += '         version_num = %i \n' % self.version_num
      out += '     sub_version_num = %i \n' % self.sub_version_num
      out += ' sub_sub_version_num = %i \n' % self.sub_sub_version_num
      out += '      lna_corr_value = %i \n' % self.lna_corr_value
      out += '            reserve4 = %s \n' % self.reserve4
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 32-34
      self.chdo_type = struct.unpack('>H', sfdu_block[32:34])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 34-36
      self.chdo_length = struct.unpack('>H', sfdu_block[34:36])[0]

      # orig_id: 1 byte UnsignedByte, bytes 36-37
      self.orig_id = struct.unpack('>B', sfdu_block[36:37])[0]

      # last_modifier_id: 1 byte UnsignedByte, bytes 37-38
      self.last_modifier_id = struct.unpack('>B', sfdu_block[37:38])[0]

      # reserve1: 1 byte UnsignedByte, bytes 38-39
      self.reserve1 = sfdu_block[38:39]

      # scft_id: 1 byte UnsignedByte, bytes 39-40
      self.scft_id = struct.unpack('>B', sfdu_block[39:40])[0]

      # dtt_rec_seq_num: 4 byte UnsignedMSB4, bytes 40-44
      self.dtt_rec_seq_num = struct.unpack('>I', sfdu_block[40:44])[0]

      # rec_seq_num: 4 byte UnsignedMSB4, bytes 44-48
      self.rec_seq_num = struct.unpack('>I', sfdu_block[44:48])[0]

      # year: 2 byte UnsignedMSB2, bytes 48-50
      self.year = struct.unpack('>H', sfdu_block[48:50])[0]

      # doy: 2 byte UnsignedMSB2, bytes 50-52
      self.doy = struct.unpack('>H', sfdu_block[50:52])[0]

      # sec: 8 byte IEEE754MSBDouble, bytes 52-60
      self.sec = struct.unpack('>d', sfdu_block[52:60])[0]

      # rct_day: 2 byte UnsignedMSB2, bytes 60-62
      self.rct_day = struct.unpack('>H', sfdu_block[60:62])[0]

      # rct_msec: 4 byte UnsignedMSB4, bytes 62-66
      self.rct_msec = struct.unpack('>I', sfdu_block[62:66])[0]

      # dl_dss_id: 1 byte UnsignedByte, bytes 66-67
      self.dl_dss_id = struct.unpack('>B', sfdu_block[66:67])[0]

      # dl_band: 1 byte UnsignedByte, bytes 67-68
      self.dl_band = struct.unpack('>B', sfdu_block[67:68])[0]

      # dl_chan_num: 1 byte UnsignedByte, bytes 68-69
      self.dl_chan_num = struct.unpack('>B', sfdu_block[68:69])[0]

      # prdx_mode: 1 byte UnsignedByte, bytes 69-70
      self.prdx_mode = struct.unpack('>B', sfdu_block[69:70])[0]

      # ul_prdx_stn: 1 byte UnsignedByte, bytes 70-71
      self.ul_prdx_stn = struct.unpack('>B', sfdu_block[70:71])[0]

      # ul_band_dl: 1 byte UnsignedByte, bytes 71-72
      self.ul_band_dl = struct.unpack('>B', sfdu_block[71:72])[0]

      # array_delay: 8 byte IEEE754MSBDouble, bytes 72-80
      self.array_delay = struct.unpack('>d', sfdu_block[72:80])[0]

      # fts_vld_flag: 1 byte UnsignedByte, bytes 80-81
      self.fts_vld_flag = struct.unpack('>B', sfdu_block[80:81])[0]

      # carr_lock_stat: 1 byte UnsignedByte, bytes 81-82
      self.carr_lock_stat = struct.unpack('>B', sfdu_block[81:82])[0]

      # array_flag: 1 byte UnsignedByte, bytes 82-83
      self.array_flag = struct.unpack('>B', sfdu_block[82:83])[0]

      # polarization: 1 byte UnsignedByte, bytes 83-84
      self.polarization = struct.unpack('>B', sfdu_block[83:84])[0]

      # diplxr_stat: 1 byte UnsignedByte, bytes 84-85
      self.diplxr_stat = struct.unpack('>B', sfdu_block[84:85])[0]

      # lna_num: 1 byte UnsignedByte, bytes 85-86
      self.lna_num = struct.unpack('>B', sfdu_block[85:86])[0]

      # rf_if_chan_num: 1 byte UnsignedByte, bytes 86-87
      self.rf_if_chan_num = struct.unpack('>B', sfdu_block[86:87])[0]

      # if_num: 1 byte UnsignedByte, bytes 87-88
      self.if_num = struct.unpack('>B', sfdu_block[87:88])[0]

      # rcv_time_tag_delay: 8 byte IEEE754MSBDouble, bytes 88-96
      self.rcv_time_tag_delay = struct.unpack('>d', sfdu_block[88:96])[0]

      # dl_zheight_corr: 4 byte IEEE754MSBSingle, bytes 96-100
      self.dl_zheight_corr = struct.unpack('>f', sfdu_block[96:100])[0]

      # vld_ul_stn: 1 byte UnsignedByte, bytes 100-101
      self.vld_ul_stn = struct.unpack('>B', sfdu_block[100:101])[0]

      # vld_dop_mode: 1 byte UnsignedByte, bytes 101-102
      self.vld_dop_mode = struct.unpack('>B', sfdu_block[101:102])[0]

      # vld_scft_coh: 1 byte UnsignedByte, bytes 102-103
      self.vld_scft_coh = struct.unpack('>B', sfdu_block[102:103])[0]

      # scft_transpd_lock: 1 byte UnsignedByte, bytes 103-104
      self.scft_transpd_lock = struct.unpack('>B', sfdu_block[103:104])[0]

      # scft_transpd_num: 1 byte UnsignedByte, bytes 104-105
      self.scft_transpd_num = struct.unpack('>B', sfdu_block[104:105])[0]

      # reserve1a: 1 byte UnsignedByte, bytes 105-106
      self.reserve1a = sfdu_block[105:106]

      # scft_osc_freq: 8 byte IEEE754MSBDouble, bytes 106-114
      self.scft_osc_freq = struct.unpack('>d', sfdu_block[106:114])[0]

      # scft_transpd_delay: 8 byte IEEE754MSBDouble, bytes 114-122
      self.scft_transpd_delay = struct.unpack('>d', sfdu_block[114:122])[0]

      # scft_transpd_turn_num: 4 byte UnsignedMSB4, bytes 122-126
      self.scft_transpd_turn_num = struct.unpack('>I', sfdu_block[122:126])[0]

      # scft_transpd_turn_den: 4 byte UnsignedMSB4, bytes 126-130
      self.scft_transpd_turn_den = struct.unpack('>I', sfdu_block[126:130])[0]

      # scft_twnc_stat: 1 byte UnsignedByte, bytes 130-131
      self.scft_twnc_stat = struct.unpack('>B', sfdu_block[130:131])[0]

      # scft_osc_type: 1 byte UnsignedByte, bytes 131-132
      self.scft_osc_type = struct.unpack('>B', sfdu_block[131:132])[0]

      # mod_day: 2 byte UnsignedMSB2, bytes 132-134
      self.mod_day = struct.unpack('>H', sfdu_block[132:134])[0]

      # mod_msec: 4 byte UnsignedMSB4, bytes 134-138
      self.mod_msec = struct.unpack('>I', sfdu_block[134:138])[0]

      # version_num: 1 byte UnsignedByte, bytes 138-139
      self.version_num = struct.unpack('>B', sfdu_block[138:139])[0]

      # sub_version_num: 1 byte UnsignedByte, bytes 139-140
      self.sub_version_num = struct.unpack('>B', sfdu_block[139:140])[0]

      # sub_sub_version_num: 1 byte UnsignedByte, bytes 140-141
      self.sub_sub_version_num = struct.unpack('>B', sfdu_block[140:141])[0]

      # lna_corr_value: 1 byte UnsignedByte, bytes 141-142
      self.lna_corr_value = struct.unpack('>B', sfdu_block[141:142])[0]

      # reserve4: 4 byte UnsignedMSB4, bytes 142-146
      self.reserve4 = sfdu_block[142:146]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class DerivedCHDO:
   """
      Read/decode an SFDU Secondary CHDO for TRK 2-34

      Type C125: derived CHDO
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.orig_id = -1
      self.last_modifier_id = -1
      self.reserve1 = ''
      self.scft_id = -1
      self.rec_seq_num = -1
      self.year = -1
      self.doy = -1
      self.sec = -1
      self.rct_day = -1
      self.rct_msec = -1
      self.stn_stream_src = -1
      self.ul_band = -1
      self.ul_assembly_num = -1
      self.transmit_num = -1
      self.transmit_stat = -1
      self.transmit_mode = -1
      self.cmd_modul_stat = -1
      self.rng_modul_stat = -1
      self.transmit_time_tag_delay = -1
      self.ul_zheight_corr = -1
      self.dl_dss_id = -1
      self.reserve1a = ''
      self.dl_chan_num = -1
      self.prdx_mode = -1
      self.ul_prdx_stn = -1
      self.ul_band_dl = -1
      self.array_delay = -1
      self.fts_vld_flag = -1
      self.carr_lock_stat = -1
      self.array_flag = -1
      self.lna_num = -1
      self.rcv_time_tag_delay = -1
      self.dl_zheight_corr = -1
      self.vld_ul_stn = -1
      self.vld_dop_mode = -1
      self.vld_scft_coh = -1
      self.vld_dl_band = -1
      self.scft_transpd_lock = -1
      self.scft_transpd_num = -1
      self.reserve2 = ''
      self.scft_osc_freq = -1
      self.scft_transpd_delay = -1
      self.scft_transpd_turn_num = -1
      self.scft_transpd_turn_den = -1
      self.scft_twnc_stat = -1
      self.scft_osc_type = -1
      self.mod_day = -1
      self.mod_msec = -1
      self.cnt_time = -1
      self.version_num = -1
      self.sub_version_num = -1
      self.sub_sub_version_num = -1
      self.lna_corr_value = -1

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '             orig_id = %i \n' % self.orig_id
      out += '    last_modifier_id = %i \n' % self.last_modifier_id
      out += '            reserve1 = %s \n' % self.reserve1
      out += '             scft_id = %i \n' % self.scft_id
      out += '         rec_seq_num = %i \n' % self.rec_seq_num
      out += '                year = %i \n' % self.year
      out += '                 doy = %i \n' % self.doy
      out += '                 sec = %f \n' % self.sec
      out += '             rct_day = %i \n' % self.rct_day
      out += '            rct_msec = %i \n' % self.rct_msec
      out += '      stn_stream_src = %i \n' % self.stn_stream_src
      out += '             ul_band = %i \n' % self.ul_band
      out += '     ul_assembly_num = %i \n' % self.ul_assembly_num
      out += '        transmit_num = %i \n' % self.transmit_num
      out += '       transmit_stat = %i \n' % self.transmit_stat
      out += '       transmit_mode = %i \n' % self.transmit_mode
      out += '      cmd_modul_stat = %i \n' % self.cmd_modul_stat
      out += '      rng_modul_stat = %i \n' % self.rng_modul_stat
      out += 'transmit_time_tag_delay = %f \n' % self.transmit_time_tag_delay
      out += '     ul_zheight_corr = %e \n' % self.ul_zheight_corr
      out += '           dl_dss_id = %i \n' % self.dl_dss_id
      out += '           reserve1a = %s \n' % self.reserve1a
      out += '         dl_chan_num = %i \n' % self.dl_chan_num
      out += '           prdx_mode = %i \n' % self.prdx_mode
      out += '         ul_prdx_stn = %i \n' % self.ul_prdx_stn
      out += '          ul_band_dl = %i \n' % self.ul_band_dl
      out += '         array_delay = %f \n' % self.array_delay
      out += '        fts_vld_flag = %i \n' % self.fts_vld_flag
      out += '      carr_lock_stat = %i \n' % self.carr_lock_stat
      out += '          array_flag = %i \n' % self.array_flag
      out += '             lna_num = %i \n' % self.lna_num
      out += '  rcv_time_tag_delay = %f \n' % self.rcv_time_tag_delay
      out += '     dl_zheight_corr = %e \n' % self.dl_zheight_corr
      out += '          vld_ul_stn = %i \n' % self.vld_ul_stn
      out += '        vld_dop_mode = %i \n' % self.vld_dop_mode
      out += '        vld_scft_coh = %i \n' % self.vld_scft_coh
      out += '         vld_dl_band = %i \n' % self.vld_dl_band
      out += '   scft_transpd_lock = %i \n' % self.scft_transpd_lock
      out += '    scft_transpd_num = %i \n' % self.scft_transpd_num
      out += '            reserve2 = %s \n' % self.reserve2
      out += '       scft_osc_freq = %f \n' % self.scft_osc_freq
      out += '  scft_transpd_delay = %e \n' % self.scft_transpd_delay
      out += 'scft_transpd_turn_num = %i \n' % self.scft_transpd_turn_num
      out += 'scft_transpd_turn_den = %i \n' % self.scft_transpd_turn_den
      out += '      scft_twnc_stat = %i \n' % self.scft_twnc_stat
      out += '       scft_osc_type = %i \n' % self.scft_osc_type
      out += '             mod_day = %i \n' % self.mod_day
      out += '            mod_msec = %i \n' % self.mod_msec
      out += '            cnt_time = %f \n' % self.cnt_time
      out += '         version_num = %i \n' % self.version_num
      out += '     sub_version_num = %i \n' % self.sub_version_num
      out += ' sub_sub_version_num = %i \n' % self.sub_sub_version_num
      out += '      lna_corr_value = %i \n' % self.lna_corr_value
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 32-34
      self.chdo_type = struct.unpack('>H', sfdu_block[32:34])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 34-36
      self.chdo_length = struct.unpack('>H', sfdu_block[34:36])[0]

      # orig_id: 1 byte UnsignedByte, bytes 36-37
      self.orig_id = struct.unpack('>B', sfdu_block[36:37])[0]

      # last_modifier_id: 1 byte UnsignedByte, bytes 37-38
      self.last_modifier_id = struct.unpack('>B', sfdu_block[37:38])[0]

      # reserve1: 1 byte UnsignedByte, bytes 38-39
      self.reserve1 = sfdu_block[38:39]

      # scft_id: 1 byte UnsignedByte, bytes 39-40
      self.scft_id = struct.unpack('>B', sfdu_block[39:40])[0]

      # rec_seq_num: 4 byte UnsignedMSB4, bytes 40-44
      self.rec_seq_num = struct.unpack('>I', sfdu_block[40:44])[0]

      # year: 2 byte UnsignedMSB2, bytes 44-46
      self.year = struct.unpack('>H', sfdu_block[44:46])[0]

      # doy: 2 byte UnsignedMSB2, bytes 46-48
      self.doy = struct.unpack('>H', sfdu_block[46:48])[0]

      # sec: 8 byte IEEE754MSBDouble, bytes 48-56
      self.sec = struct.unpack('>d', sfdu_block[48:56])[0]

      # rct_day: 2 byte UnsignedMSB2, bytes 56-58
      self.rct_day = struct.unpack('>H', sfdu_block[56:58])[0]

      # rct_msec: 4 byte UnsignedMSB4, bytes 58-62
      self.rct_msec = struct.unpack('>I', sfdu_block[58:62])[0]

      # stn_stream_src: 1 byte UnsignedByte, bytes 62-63
      self.stn_stream_src = struct.unpack('>B', sfdu_block[62:63])[0]

      # ul_band: 1 byte UnsignedByte, bytes 63-64
      self.ul_band = struct.unpack('>B', sfdu_block[63:64])[0]

      # ul_assembly_num: 1 byte UnsignedByte, bytes 64-65
      self.ul_assembly_num = struct.unpack('>B', sfdu_block[64:65])[0]

      # transmit_num: 1 byte UnsignedByte, bytes 65-66
      self.transmit_num = struct.unpack('>B', sfdu_block[65:66])[0]

      # transmit_stat: 1 byte UnsignedByte, bytes 66-67
      self.transmit_stat = struct.unpack('>B', sfdu_block[66:67])[0]

      # transmit_mode: 1 byte UnsignedByte, bytes 67-68
      self.transmit_mode = struct.unpack('>B', sfdu_block[67:68])[0]

      # cmd_modul_stat: 1 byte UnsignedByte, bytes 68-69
      self.cmd_modul_stat = struct.unpack('>B', sfdu_block[68:69])[0]

      # rng_modul_stat: 1 byte UnsignedByte, bytes 69-70
      self.rng_modul_stat = struct.unpack('>B', sfdu_block[69:70])[0]

      # transmit_time_tag_delay: 8 byte IEEE754MSBDouble, bytes 70-78
      self.transmit_time_tag_delay = struct.unpack('>d', sfdu_block[70:78])[0]

      # ul_zheight_corr: 4 byte IEEE754MSBSingle, bytes 78-82
      self.ul_zheight_corr = struct.unpack('>f', sfdu_block[78:82])[0]

      # dl_dss_id: 1 byte UnsignedByte, bytes 82-83
      self.dl_dss_id = struct.unpack('>B', sfdu_block[82:83])[0]

      # reserve1a: 1 byte UnsignedByte, bytes 83-84
      self.reserve1a = sfdu_block[83:84]

      # dl_chan_num: 1 byte UnsignedByte, bytes 84-85
      self.dl_chan_num = struct.unpack('>B', sfdu_block[84:85])[0]

      # prdx_mode: 1 byte UnsignedByte, bytes 85-86
      self.prdx_mode = struct.unpack('>B', sfdu_block[85:86])[0]

      # ul_prdx_stn: 1 byte UnsignedByte, bytes 86-87
      self.ul_prdx_stn = struct.unpack('>B', sfdu_block[86:87])[0]

      # ul_band_dl: 1 byte UnsignedByte, bytes 87-88
      self.ul_band_dl = struct.unpack('>B', sfdu_block[87:88])[0]

      # array_delay: 8 byte IEEE754MSBDouble, bytes 88-96
      self.array_delay = struct.unpack('>d', sfdu_block[88:96])[0]

      # fts_vld_flag: 1 byte UnsignedByte, bytes 96-97
      self.fts_vld_flag = struct.unpack('>B', sfdu_block[96:97])[0]

      # carr_lock_stat: 1 byte UnsignedByte, bytes 97-98
      self.carr_lock_stat = struct.unpack('>B', sfdu_block[97:98])[0]

      # array_flag: 1 byte UnsignedByte, bytes 98-99
      self.array_flag = struct.unpack('>B', sfdu_block[98:99])[0]

      # lna_num: 1 byte UnsignedByte, bytes 99-100
      self.lna_num = struct.unpack('>B', sfdu_block[99:100])[0]

      # rcv_time_tag_delay: 8 byte IEEE754MSBDouble, bytes 100-108
      self.rcv_time_tag_delay = struct.unpack('>d', sfdu_block[100:108])[0]

      # dl_zheight_corr: 4 byte IEEE754MSBSingle, bytes 108-112
      self.dl_zheight_corr = struct.unpack('>f', sfdu_block[108:112])[0]

      # vld_ul_stn: 1 byte UnsignedByte, bytes 112-113
      self.vld_ul_stn = struct.unpack('>B', sfdu_block[112:113])[0]

      # vld_dop_mode: 1 byte UnsignedByte, bytes 113-114
      self.vld_dop_mode = struct.unpack('>B', sfdu_block[113:114])[0]

      # vld_scft_coh: 1 byte UnsignedByte, bytes 114-115
      self.vld_scft_coh = struct.unpack('>B', sfdu_block[114:115])[0]

      # vld_dl_band: 1 byte UnsignedByte, bytes 115-116
      self.vld_dl_band = struct.unpack('>B', sfdu_block[115:116])[0]

      # scft_transpd_lock: 1 byte UnsignedByte, bytes 116-117
      self.scft_transpd_lock = struct.unpack('>B', sfdu_block[116:117])[0]

      # scft_transpd_num: 1 byte UnsignedByte, bytes 117-118
      self.scft_transpd_num = struct.unpack('>B', sfdu_block[117:118])[0]

      # reserve2: 2 byte UnsignedMSB2, bytes 118-120
      self.reserve2 = sfdu_block[118:120]

      # scft_osc_freq: 8 byte IEEE754MSBDouble, bytes 120-128
      self.scft_osc_freq = struct.unpack('>d', sfdu_block[120:128])[0]

      # scft_transpd_delay: 8 byte IEEE754MSBDouble, bytes 128-136
      self.scft_transpd_delay = struct.unpack('>d', sfdu_block[128:136])[0]

      # scft_transpd_turn_num: 4 byte UnsignedMSB4, bytes 136-140
      self.scft_transpd_turn_num = struct.unpack('>I', sfdu_block[136:140])[0]

      # scft_transpd_turn_den: 4 byte UnsignedMSB4, bytes 140-144
      self.scft_transpd_turn_den = struct.unpack('>I', sfdu_block[140:144])[0]

      # scft_twnc_stat: 1 byte UnsignedByte, bytes 144-145
      self.scft_twnc_stat = struct.unpack('>B', sfdu_block[144:145])[0]

      # scft_osc_type: 1 byte UnsignedByte, bytes 145-146
      self.scft_osc_type = struct.unpack('>B', sfdu_block[145:146])[0]

      # mod_day: 2 byte UnsignedMSB2, bytes 146-148
      self.mod_day = struct.unpack('>H', sfdu_block[146:148])[0]

      # mod_msec: 4 byte UnsignedMSB4, bytes 148-152
      self.mod_msec = struct.unpack('>I', sfdu_block[148:152])[0]

      # cnt_time: 4 byte IEEE754MSBSingle, bytes 152-156
      self.cnt_time = struct.unpack('>f', sfdu_block[152:156])[0]

      # version_num: 1 byte UnsignedByte, bytes 156-157
      self.version_num = struct.unpack('>B', sfdu_block[156:157])[0]

      # sub_version_num: 1 byte UnsignedByte, bytes 157-158
      self.sub_version_num = struct.unpack('>B', sfdu_block[157:158])[0]

      # sub_sub_version_num: 1 byte UnsignedByte, bytes 158-159
      self.sub_sub_version_num = struct.unpack('>B', sfdu_block[158:159])[0]

      # lna_corr_value: 1 byte UnsignedByte, bytes 159-160
      self.lna_corr_value = struct.unpack('>B', sfdu_block[159:160])[0]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class InferometricCHDO:
   """
      Read/decode an SFDU Secondary CHDO for TRK 2-34

      Type C126: VLBI CHDO
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.orig_id = -1
      self.last_modifier_id = -1
      self.reserve1a = ''
      self.scft_id = -1
      self.rec_seq_num = -1
      self.year = -1
      self.doy = -1
      self.sec = -1
      self.rct_day = -1
      self.rct_msec = -1
      self.ul_dss_id = -1
      self.dl_dss_id = -1
      self.dl_dss_id_2 = -1
      self.dl_band = -1
      self.prdx_mode = -1
      self.ul_band = -1
      self.rec_type = -1
      self.source_type = -1
      self.fts_vld_flag = -1
      self.reserve1b = ''
      self.array_flag = -1
      self.array_flag_2 = -1
      self.array_delay = -1
      self.array_delay_2 = -1
      self.rcv_time_tag_delay = -1
      self.rcv_time_tag_delay_2 = -1
      self.mod_day = -1
      self.mod_msec = -1
      self.version_num = -1
      self.sub_version_num = -1
      self.sub_sub_version_num = -1
      self.reserve1c = ''
      self.reserve8 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '             orig_id = %i \n' % self.orig_id
      out += '    last_modifier_id = %i \n' % self.last_modifier_id
      out += '           reserve1a = %s \n' % self.reserve1a
      out += '             scft_id = %i \n' % self.scft_id
      out += '         rec_seq_num = %i \n' % self.rec_seq_num
      out += '                year = %i \n' % self.year
      out += '                 doy = %i \n' % self.doy
      out += '                 sec = %f \n' % self.sec
      out += '             rct_day = %i \n' % self.rct_day
      out += '            rct_msec = %i \n' % self.rct_msec
      out += '           ul_dss_id = %i \n' % self.ul_dss_id
      out += '           dl_dss_id = %i \n' % self.dl_dss_id
      out += '         dl_dss_id_2 = %i \n' % self.dl_dss_id_2
      out += '             dl_band = %i \n' % self.dl_band
      out += '           prdx_mode = %i \n' % self.prdx_mode
      out += '             ul_band = %i \n' % self.ul_band
      out += '            rec_type = %i \n' % self.rec_type
      out += '         source_type = %i \n' % self.source_type
      out += '        fts_vld_flag = %i \n' % self.fts_vld_flag
      out += '           reserve1b = %s \n' % self.reserve1b
      out += '          array_flag = %i \n' % self.array_flag
      out += '        array_flag_2 = %i \n' % self.array_flag_2
      out += '         array_delay = %f \n' % self.array_delay
      out += '       array_delay_2 = %f \n' % self.array_delay_2
      out += '  rcv_time_tag_delay = %f \n' % self.rcv_time_tag_delay
      out += 'rcv_time_tag_delay_2 = %f \n' % self.rcv_time_tag_delay_2
      out += '             mod_day = %i \n' % self.mod_day
      out += '            mod_msec = %i \n' % self.mod_msec
      out += '         version_num = %i \n' % self.version_num
      out += '     sub_version_num = %i \n' % self.sub_version_num
      out += ' sub_sub_version_num = %i \n' % self.sub_sub_version_num
      out += '           reserve1c = %s \n' % self.reserve1c
      out += '            reserve8 = %s \n' % self.reserve8
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 32-34
      self.chdo_type = struct.unpack('>H', sfdu_block[32:34])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 34-36
      self.chdo_length = struct.unpack('>H', sfdu_block[34:36])[0]

      # orig_id: 1 byte UnsignedByte, bytes 36-37
      self.orig_id = struct.unpack('>B', sfdu_block[36:37])[0]

      # last_modifier_id: 1 byte UnsignedByte, bytes 37-38
      self.last_modifier_id = struct.unpack('>B', sfdu_block[37:38])[0]

      # reserve1a: 1 byte UnsignedByte, bytes 38-39
      self.reserve1a = sfdu_block[38:39]

      # scft_id: 1 byte UnsignedByte, bytes 39-40
      self.scft_id = struct.unpack('>B', sfdu_block[39:40])[0]

      # rec_seq_num: 4 byte UnsignedMSB4, bytes 40-44
      self.rec_seq_num = struct.unpack('>I', sfdu_block[40:44])[0]

      # year: 2 byte UnsignedMSB2, bytes 44-46
      self.year = struct.unpack('>H', sfdu_block[44:46])[0]

      # doy: 2 byte UnsignedMSB2, bytes 46-48
      self.doy = struct.unpack('>H', sfdu_block[46:48])[0]

      # sec: 8 byte IEEE754MSBDouble, bytes 48-56
      self.sec = struct.unpack('>d', sfdu_block[48:56])[0]

      # rct_day: 2 byte UnsignedMSB2, bytes 56-58
      self.rct_day = struct.unpack('>H', sfdu_block[56:58])[0]

      # rct_msec: 4 byte UnsignedMSB4, bytes 58-62
      self.rct_msec = struct.unpack('>I', sfdu_block[58:62])[0]

      # ul_dss_id: 1 byte UnsignedByte, bytes 62-63
      self.ul_dss_id = struct.unpack('>B', sfdu_block[62:63])[0]

      # dl_dss_id: 1 byte UnsignedByte, bytes 63-64
      self.dl_dss_id = struct.unpack('>B', sfdu_block[63:64])[0]

      # dl_dss_id_2: 1 byte UnsignedByte, bytes 64-65
      self.dl_dss_id_2 = struct.unpack('>B', sfdu_block[64:65])[0]

      # dl_band: 1 byte UnsignedByte, bytes 65-66
      self.dl_band = struct.unpack('>B', sfdu_block[65:66])[0]

      # prdx_mode: 1 byte UnsignedByte, bytes 66-67
      self.prdx_mode = struct.unpack('>B', sfdu_block[66:67])[0]

      # ul_band: 1 byte UnsignedByte, bytes 67-68
      self.ul_band = struct.unpack('>B', sfdu_block[67:68])[0]

      # rec_type: 1 byte UnsignedByte, bytes 68-69
      self.rec_type = struct.unpack('>B', sfdu_block[68:69])[0]

      # source_type: 1 byte UnsignedByte, bytes 69-70
      self.source_type = struct.unpack('>B', sfdu_block[69:70])[0]

      # fts_vld_flag: 1 byte UnsignedByte, bytes 70-71
      self.fts_vld_flag = struct.unpack('>B', sfdu_block[70:71])[0]

      # reserve1b: 1 byte UnsignedByte, bytes 71-72
      self.reserve1b = sfdu_block[71:72]

      # array_flag: 1 byte UnsignedByte, bytes 72-73
      self.array_flag = struct.unpack('>B', sfdu_block[72:73])[0]

      # array_flag_2: 1 byte UnsignedByte, bytes 73-74
      self.array_flag_2 = struct.unpack('>B', sfdu_block[73:74])[0]

      # array_delay: 8 byte IEEE754MSBDouble, bytes 74-82
      self.array_delay = struct.unpack('>d', sfdu_block[74:82])[0]

      # array_delay_2: 8 byte IEEE754MSBDouble, bytes 82-90
      self.array_delay_2 = struct.unpack('>d', sfdu_block[82:90])[0]

      # rcv_time_tag_delay: 8 byte IEEE754MSBDouble, bytes 90-98
      self.rcv_time_tag_delay = struct.unpack('>d', sfdu_block[90:98])[0]

      # rcv_time_tag_delay_2: 8 byte IEEE754MSBDouble, bytes 98-106
      self.rcv_time_tag_delay_2 = struct.unpack('>d', sfdu_block[98:106])[0]

      # mod_day: 2 byte UnsignedMSB2, bytes 106-108
      self.mod_day = struct.unpack('>H', sfdu_block[106:108])[0]

      # mod_msec: 4 byte UnsignedMSB4, bytes 108-112
      self.mod_msec = struct.unpack('>I', sfdu_block[108:112])[0]

      # version_num: 1 byte UnsignedByte, bytes 112-113
      self.version_num = struct.unpack('>B', sfdu_block[112:113])[0]

      # sub_version_num: 1 byte UnsignedByte, bytes 113-114
      self.sub_version_num = struct.unpack('>B', sfdu_block[113:114])[0]

      # sub_sub_version_num: 1 byte UnsignedByte, bytes 114-115
      self.sub_sub_version_num = struct.unpack('>B', sfdu_block[114:115])[0]

      # reserve1c: 1 byte UnsignedByte, bytes 115-116
      self.reserve1c = sfdu_block[115:116]

      # reserve8: 8 byte UnsignedMSB8, bytes 116-124
      self.reserve8 = sfdu_block[116:124]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class FilteredCHDO:
   """
      Read/decode an SFDU Secondary CHDO for TRK 2-34

      Type C127: filtered CHDO
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.orig_id = -1
      self.last_modifier_id = -1
      self.reserve1 = ''
      self.scft_id = -1
      self.rec_seq_num = -1
      self.year = -1
      self.doy = -1
      self.sec = -1
      self.rct_day = -1
      self.rct_msec = -1
      self.dl_dss_id = -1
      self.dl_band = -1
      self.dl_chan_num = -1
      self.prdx_mode = -1
      self.ul_prdx_stn = -1
      self.ul_band_dl = -1
      self.rcv_time_tag_delay = -1
      self.array_delay = -1
      self.fts_vld_flag = -1
      self.carr_lock_stat = -1
      self.array_flag = -1
      self.lna_num = -1
      self.vld_ul_stn = -1
      self.vld_dop_mode = -1
      self.vld_scft_coh = -1
      self.scft_transpd_lock = -1
      self.scft_transpd_num = -1
      self.reserve1a = ''
      self.scft_osc_freq = -1
      self.scft_transpd_delay = -1
      self.scft_transpd_turn_num = -1
      self.scft_transpd_turn_den = -1
      self.scft_twnc_stat = -1
      self.scft_osc_type = -1
      self.mod_day = -1
      self.mod_msec = -1
      self.version_num = -1
      self.sub_version_num = -1
      self.sub_sub_version_num = -1
      self.reserve1b = ''
      self.reserve4 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '    last_modifier_id = %i \n' % self.last_modifier_id
      out += '             orig_id = %i \n' % self.orig_id
      out += '            reserve1 = %s \n' % self.reserve1
      out += '             scft_id = %i \n' % self.scft_id
      out += '         rec_seq_num = %i \n' % self.rec_seq_num
      out += '                year = %i \n' % self.year
      out += '                 doy = %i \n' % self.doy
      out += '                 sec = %f \n' % self.sec
      out += '             rct_day = %i \n' % self.rct_day
      out += '            rct_msec = %i \n' % self.rct_msec
      out += '           dl_dss_id = %i \n' % self.dl_dss_id
      out += '             dl_band = %i \n' % self.dl_band
      out += '         dl_chan_num = %i \n' % self.dl_chan_num
      out += '           prdx_mode = %i \n' % self.prdx_mode
      out += '         ul_prdx_stn = %i \n' % self.ul_prdx_stn
      out += '          ul_band_dl = %i \n' % self.ul_band_dl
      out += '  rcv_time_tag_delay = %f \n' % self.rcv_time_tag_delay
      out += '         array_delay = %f \n' % self.array_delay
      out += '        fts_vld_flag = %i \n' % self.fts_vld_flag
      out += '      carr_lock_stat = %i \n' % self.carr_lock_stat
      out += '          array_flag = %i \n' % self.array_flag
      out += '             lna_num = %i \n' % self.lna_num
      out += '          vld_ul_stn = %i \n' % self.vld_ul_stn
      out += '        vld_dop_mode = %i \n' % self.vld_dop_mode
      out += '        vld_scft_coh = %i \n' % self.vld_scft_coh
      out += '   scft_transpd_lock = %i \n' % self.scft_transpd_lock
      out += '    scft_transpd_num = %i \n' % self.scft_transpd_num
      out += '           reserve1a = %s \n' % self.reserve1a
      out += '       scft_osc_freq = %f \n' % self.scft_osc_freq
      out += '  scft_transpd_delay = %e \n' % self.scft_transpd_delay
      out += 'scft_transpd_turn_num = %i \n' % self.scft_transpd_turn_num
      out += 'scft_transpd_turn_den = %i \n' % self.scft_transpd_turn_den
      out += '      scft_twnc_stat = %i \n' % self.scft_twnc_stat
      out += '       scft_osc_type = %i \n' % self.scft_osc_type
      out += '             mod_day = %i \n' % self.mod_day
      out += '            mod_msec = %i \n' % self.mod_msec
      out += '         version_num = %i \n' % self.version_num
      out += '     sub_version_num = %i \n' % self.sub_version_num
      out += ' sub_sub_version_num = %i \n' % self.sub_sub_version_num
      out += '           reserve1b = %s \n' % self.reserve1b
      out += '            reserve4 = %s \n' % self.reserve4
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 32-34
      self.chdo_type = struct.unpack('>H', sfdu_block[32:34])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 34-36
      self.chdo_length = struct.unpack('>H', sfdu_block[34:36])[0]

      # orig_id: 1 byte UnsignedByte, bytes 36-37
      self.orig_id = struct.unpack('>B', sfdu_block[36:37])[0]

      # last_modifier_id: 1 byte UnsignedByte, bytes 37-38
      self.last_modifier_id = struct.unpack('>B', sfdu_block[37:38])[0]

      # reserve1: 1 byte UnsignedByte, bytes 38-39
      self.reserve1 = sfdu_block[38:39]

      # scft_id: 1 byte UnsignedByte, bytes 39-40
      self.scft_id = struct.unpack('>B', sfdu_block[39:40])[0]

      # rec_seq_num: 4 byte UnsignedMSB4, bytes 40-44
      self.rec_seq_num = struct.unpack('>I', sfdu_block[40:44])[0]

      # year: 2 byte UnsignedMSB2, bytes 44-46
      self.year = struct.unpack('>H', sfdu_block[44:46])[0]

      # doy: 2 byte UnsignedMSB2, bytes 46-48
      self.doy = struct.unpack('>H', sfdu_block[46:48])[0]

      # sec: 8 byte IEEE754MSBDouble, bytes 48-56
      self.sec = struct.unpack('>d', sfdu_block[48:56])[0]

      # rct_day: 2 byte UnsignedMSB2, bytes 56-58
      self.rct_day = struct.unpack('>H', sfdu_block[56:58])[0]

      # rct_msec: 4 byte UnsignedMSB4, bytes 58-62
      self.rct_msec = struct.unpack('>I', sfdu_block[58:62])[0]

      # dl_dss_id: 1 byte UnsignedByte, bytes 62-63
      self.dl_dss_id = struct.unpack('>B', sfdu_block[62:63])[0]

      # dl_band: 1 byte UnsignedByte, bytes 63-64
      self.dl_band = struct.unpack('>B', sfdu_block[63:64])[0]

      # dl_chan_num: 1 byte UnsignedByte, bytes 64-65
      self.dl_chan_num = struct.unpack('>B', sfdu_block[64:65])[0]

      # prdx_mode: 1 byte UnsignedByte, bytes 65-66
      self.prdx_mode = struct.unpack('>B', sfdu_block[65:66])[0]

      # ul_prdx_stn: 1 byte UnsignedByte, bytes 66-67
      self.ul_prdx_stn = struct.unpack('>B', sfdu_block[66:67])[0]

      # ul_band_dl: 1 byte UnsignedByte, bytes 67-68
      self.ul_band_dl = struct.unpack('>B', sfdu_block[67:68])[0]

      # rcv_time_tag_delay: 8 byte IEEE754MSBDouble, bytes 68-76
      self.rcv_time_tag_delay = struct.unpack('>d', sfdu_block[68:76])[0]

      # array_delay: 8 byte IEEE754MSBDouble, bytes 76-84
      self.array_delay = struct.unpack('>d', sfdu_block[76:84])[0]

      # fts_vld_flag: 1 byte UnsignedByte, bytes 84-85
      self.fts_vld_flag = struct.unpack('>B', sfdu_block[84:85])[0]

      # carr_lock_stat: 1 byte UnsignedByte, bytes 85-86
      self.carr_lock_stat = struct.unpack('>B', sfdu_block[85:86])[0]

      # array_flag: 1 byte UnsignedByte, bytes 86-87
      self.array_flag = struct.unpack('>B', sfdu_block[86:87])[0]

      # lna_num: 1 byte UnsignedByte, bytes 87-88
      self.lna_num = struct.unpack('>B', sfdu_block[87:88])[0]

      # vld_ul_stn: 1 byte UnsignedByte, bytes 88-89
      self.vld_ul_stn = struct.unpack('>B', sfdu_block[88:89])[0]

      # vld_dop_mode: 1 byte UnsignedByte, bytes 89-90
      self.vld_dop_mode = struct.unpack('>B', sfdu_block[89:90])[0]

      # vld_scft_coh: 1 byte UnsignedByte, bytes 90-91
      self.vld_scft_coh = struct.unpack('>B', sfdu_block[90:91])[0]

      # scft_transpd_lock: 1 byte UnsignedByte, bytes 91-92
      self.scft_transpd_lock = struct.unpack('>B', sfdu_block[91:92])[0]

      # scft_transpd_num: 1 byte UnsignedByte, bytes 92-93
      self.scft_transpd_num = struct.unpack('>B', sfdu_block[92:93])[0]

      # reserve1a: 1 byte UnsignedByte, bytes 93-94
      self.reserve1a = sfdu_block[93:94]

      # scft_osc_freq: 8 byte IEEE754MSBDouble, bytes 94-102
      self.scft_osc_freq = struct.unpack('>d', sfdu_block[94:102])[0]

      # scft_transpd_delay: 8 byte IEEE754MSBDouble, bytes 102-110
      self.scft_transpd_delay = struct.unpack('>d', sfdu_block[102:110])[0]

      # scft_transpd_turn_num: 4 byte UnsignedMSB4, bytes 110-114
      self.scft_transpd_turn_num = struct.unpack('>I', sfdu_block[110:114])[0]

      # scft_transpd_turn_den: 4 byte UnsignedMSB4, bytes 114-118
      self.scft_transpd_turn_den = struct.unpack('>I', sfdu_block[114:118])[0]

      # scft_twnc_stat: 1 byte UnsignedByte, bytes 118-119
      self.scft_twnc_stat = struct.unpack('>B', sfdu_block[118:119])[0]

      # scft_osc_type: 1 byte UnsignedByte, bytes 119-120
      self.scft_osc_type = struct.unpack('>B', sfdu_block[119:120])[0]

      # mod_day: 2 byte UnsignedMSB2, bytes 120-122
      self.mod_day = struct.unpack('>H', sfdu_block[120:122])[0]

      # mod_msec: 4 byte UnsignedMSB4, bytes 122-126
      self.mod_msec = struct.unpack('>I', sfdu_block[122:126])[0]

      # version_num: 1 byte UnsignedByte, bytes 126-127
      self.version_num = struct.unpack('>B', sfdu_block[126:127])[0]

      # sub_version_num: 1 byte UnsignedByte, bytes 127-128
      self.sub_version_num = struct.unpack('>B', sfdu_block[127:128])[0]

      # sub_sub_version_num: 1 byte UnsignedByte, bytes 128-129
      self.sub_sub_version_num = struct.unpack('>B', sfdu_block[128:129])[0]

      # reserve1b: 1 byte UnsignedByte, bytes 129-130
      self.reserve1b = sfdu_block[129:130]

      # reserve4: 4 byte UnsignedMSB4, bytes 130-134
      self.reserve4 = sfdu_block[130:134]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class UplinkCarrierPhaseTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 00 - Tracking CHDO - Uplink Carrier Phase
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.ul_hi_phs_cycles = -1
      self.ul_lo_phs_cycles = -1
      self.ul_frac_phs_cycles = -1
      self.ramp_freq = -1
      self.ramp_rate = -1
      self.transmit_switch_stat = -1
      self.ramp_type = -1
      self.transmit_op_pwr = -1
      self.sup_data_id = ''
      self.sup_data_rev = ''
      self.prdx_time_offset = -1
      self.prdx_freq_offset = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.fabricated_sfdu_flag = -1
      self.reserve1 = ''
      self.reserve6 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '    ul_hi_phs_cycles = %i \n' % self.ul_hi_phs_cycles
      out += '    ul_lo_phs_cycles = %i \n' % self.ul_lo_phs_cycles
      out += '  ul_frac_phs_cycles = %i \n' % self.ul_frac_phs_cycles
      out += '           ramp_freq = %f \n' % self.ramp_freq
      out += '           ramp_rate = %f \n' % self.ramp_rate
      out += 'transmit_switch_stat = %i \n' % self.transmit_switch_stat
      out += '           ramp_type = %i \n' % self.ramp_type
      out += '     transmit_op_pwr = %f \n' % self.transmit_op_pwr
      out += '         sup_data_id = %s \n' % self.sup_data_id
      out += '        sup_data_rev = %s \n' % self.sup_data_rev
      out += '    prdx_time_offset = %f \n' % self.prdx_time_offset
      out += '    prdx_freq_offset = %f \n' % self.prdx_freq_offset
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += 'fabricated_sfdu_flag = %i \n' % self.fabricated_sfdu_flag
      out += '            reserve1 = %s \n' % self.reserve1
      out += '            reserve6 = %s \n' % self.reserve6
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 102-104
      self.chdo_type = struct.unpack('>H', sfdu_block[102:104])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 104-106
      self.chdo_length = struct.unpack('>H', sfdu_block[104:106])[0]

      # ul_hi_phs_cycles: 4 byte UnsignedMSB4, bytes 106-110
      self.ul_hi_phs_cycles = struct.unpack('>I', sfdu_block[106:110])[0]

      # ul_lo_phs_cycles: 4 byte UnsignedMSB4, bytes 110-114
      self.ul_lo_phs_cycles = struct.unpack('>I', sfdu_block[110:114])[0]

      # ul_frac_phs_cycles: 4 byte UnsignedMSB4, bytes 114-118
      self.ul_frac_phs_cycles = struct.unpack('>I', sfdu_block[114:118])[0]

      # ramp_freq: 8 byte IEEE754MSBDouble, bytes 118-126
      self.ramp_freq = struct.unpack('>d', sfdu_block[118:126])[0]

      # ramp_rate: 8 byte IEEE754MSBDouble, bytes 126-134
      self.ramp_rate = struct.unpack('>d', sfdu_block[126:134])[0]

      # transmit_switch_stat: 1 byte UnsignedByte, bytes 134-135
      self.transmit_switch_stat = struct.unpack('>B', sfdu_block[134:135])[0]

      # ramp_type: 1 byte UnsignedByte, bytes 135-136
      self.ramp_type = struct.unpack('>B', sfdu_block[135:136])[0]

      # transmit_op_pwr: 4 byte IEEE754MSBSingle, bytes 136-140
      self.transmit_op_pwr = struct.unpack('>f', sfdu_block[136:140])[0]

      # sup_data_id: 8 byte ASCII_String, bytes 140-148
      self.sup_data_id = struct.unpack('>8s', sfdu_block[140:148])[0]

      # sup_data_rev: 8 byte ASCII_String, bytes 148-156
      self.sup_data_rev = struct.unpack('>8s', sfdu_block[148:156])[0]

      # prdx_time_offset: 8 byte IEEE754MSBDouble, bytes 156-164
      self.prdx_time_offset = struct.unpack('>d', sfdu_block[156:164])[0]

      # prdx_freq_offset: 8 byte IEEE754MSBDouble, bytes 164-172
      self.prdx_freq_offset = struct.unpack('>d', sfdu_block[164:172])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 172-173
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[172:173])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 173-174
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[173:174])[0]

      # fabricated_sfdu_flag: 1 byte UnsignedByte, bytes 174-175
      self.fabricated_sfdu_flag = struct.unpack('>B', sfdu_block[174:175])[0]

      # reserve1: 1 byte UnsignedByte, bytes 175-176
      self.reserve1 = sfdu_block[175:176]

      # reserve6: 6 byte UnsignedMSB6, bytes 176-182
      self.reserve6 = sfdu_block[176:182]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class DownlinkCarrierPhaseTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 01 - Tracking CHDO - Downlink Carrier Phase
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.ul_hi_phs_cycles = -1
      self.ul_lo_phs_cycles = -1
      self.ul_frac_phs_cycles = -1
      self.ramp_freq = -1
      self.ramp_rate = -1
      self.transmit_switch_stat = -1
      self.ramp_type = -1
      self.transmit_op_pwr = -1
      self.sup_data_id = ''
      self.sup_data_rev = ''
      self.prdx_time_offset = -1
      self.prdx_freq_offset = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.fabricated_sfdu_flag = -1
      self.reserve1 = ''
      self.reserve6 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '        carr_loop_bw = %f \n' % self.carr_loop_bw
      out += '                pcn0 = %f \n' % self.pcn0
      out += '          pcn0_resid = %f \n' % self.pcn0_resid
      out += '                pdn0 = %f \n' % self.pdn0
      out += '          pdn0_resid = %f \n' % self.pdn0_resid
      out += '   system_noise_temp = %f \n' % self.system_noise_temp
      out += '            phs_hi_0 = %i \n' % self.phs_hi_0
      out += '            phs_lo_0 = %i \n' % self.phs_lo_0
      out += '          phs_frac_0 = %i \n' % self.phs_frac_0
      out += '            phs_hi_1 = %i \n' % self.phs_hi_1
      out += '            phs_lo_1 = %i \n' % self.phs_lo_1
      out += '          phs_frac_1 = %i \n' % self.phs_frac_1
      out += '            phs_hi_2 = %i \n' % self.phs_hi_2
      out += '            phs_lo_2 = %i \n' % self.phs_lo_2
      out += '          phs_frac_2 = %i \n' % self.phs_frac_2
      out += '            phs_hi_3 = %i \n' % self.phs_hi_3
      out += '            phs_lo_3 = %i \n' % self.phs_lo_3
      out += '          phs_frac_3 = %i \n' % self.phs_frac_3
      out += '            phs_hi_4 = %i \n' % self.phs_hi_4
      out += '            phs_lo_4 = %i \n' % self.phs_lo_4
      out += '          phs_frac_4 = %i \n' % self.phs_frac_4
      out += '            phs_hi_5 = %i \n' % self.phs_hi_5
      out += '            phs_lo_5 = %i \n' % self.phs_lo_5
      out += '          phs_frac_5 = %i \n' % self.phs_frac_5
      out += '            phs_hi_6 = %i \n' % self.phs_hi_6
      out += '            phs_lo_6 = %i \n' % self.phs_lo_6
      out += '          phs_frac_6 = %i \n' % self.phs_frac_6
      out += '            phs_hi_7 = %i \n' % self.phs_hi_7
      out += '            phs_lo_7 = %i \n' % self.phs_lo_7
      out += '          phs_frac_7 = %i \n' % self.phs_frac_7
      out += '            phs_hi_8 = %i \n' % self.phs_hi_8
      out += '            phs_lo_8 = %i \n' % self.phs_lo_8
      out += '          phs_frac_8 = %i \n' % self.phs_frac_8
      out += '            phs_hi_9 = %i \n' % self.phs_hi_9
      out += '            phs_lo_9 = %i \n' % self.phs_lo_9
      out += '          phs_frac_9 = %i \n' % self.phs_frac_9
      out += '          phs_hi_avg = %i \n' % self.phs_hi_avg
      out += '          phs_lo_avg = %i \n' % self.phs_lo_avg
      out += '        phs_frac_avg = %i \n' % self.phs_frac_avg
      out += '             dl_freq = %f \n' % self.dl_freq
      out += '           dop_resid = %f \n' % self.dop_resid
      out += '           dop_noise = %f \n' % self.dop_noise
      out += '      slipped_cycles = %i \n' % self.slipped_cycles
      out += '      carr_loop_type = %i \n' % self.carr_loop_type
      out += '            snt_flag = %i \n' % self.snt_flag
      out += '       carr_resid_wt = %f \n' % self.carr_resid_wt
      out += '         sup_data_id = %s \n' % self.sup_data_id
      out += '        sup_data_rev = %s \n' % self.sup_data_rev
      out += '    prdx_time_offset = %f \n' % self.prdx_time_offset
      out += '    prdx_freq_offset = %f \n' % self.prdx_freq_offset
      out += ' carr_resid_tol_flag = %i \n' % self.carr_resid_tol_flag
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += '  dop_mode_corr_flag = %i \n' % self.dop_mode_corr_flag
      out += '    ul_stn_corr_flag = %i \n' % self.ul_stn_corr_flag
      out += '            reserve1 = %s \n' % self.reserve1
      out += '            reserve8 = %s \n' % self.reserve8
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 146-148
      self.chdo_type = struct.unpack('>H', sfdu_block[146:148])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 148-150
      self.chdo_length = struct.unpack('>H', sfdu_block[148:150])[0]

      # carr_loop_bw: 4 byte IEEE754MSBSingle, bytes 150-154
      self.carr_loop_bw = struct.unpack('>f', sfdu_block[150:154])[0]

      # pcn0: 4 byte IEEE754MSBSingle, bytes 154-158
      self.pcn0 = struct.unpack('>f', sfdu_block[154:158])[0]

      # pcn0_resid: 4 byte IEEE754MSBSingle, bytes 158-162
      self.pcn0_resid = struct.unpack('>f', sfdu_block[158:162])[0]

      # pdn0: 4 byte IEEE754MSBSingle, bytes 162-166
      self.pdn0 = struct.unpack('>f', sfdu_block[162:166])[0]

      # pdn0_resid: 4 byte IEEE754MSBSingle, bytes 166-170
      self.pdn0_resid = struct.unpack('>f', sfdu_block[166:170])[0]

      # system_noise_temp: 4 byte IEEE754MSBSingle, bytes 170-174
      self.system_noise_temp = struct.unpack('>f', sfdu_block[170:174])[0]

      # phs_hi_0: 4 byte UnsignedMSB4, bytes 174-178
      self.phs_hi_0 = struct.unpack('>I', sfdu_block[174:178])[0]

      # phs_lo_0: 4 byte UnsignedMSB4, bytes 178-182
      self.phs_lo_0 = struct.unpack('>I', sfdu_block[178:182])[0]

      # phs_frac_0: 4 byte UnsignedMSB4, bytes 182-186
      self.phs_frac_0 = struct.unpack('>I', sfdu_block[182:186])[0]

      # phs_hi_1: 4 byte UnsignedMSB4, bytes 186-190
      self.phs_hi_1 = struct.unpack('>I', sfdu_block[186:190])[0]

      # phs_lo_1: 4 byte UnsignedMSB4, bytes 190-194
      self.phs_lo_1 = struct.unpack('>I', sfdu_block[190:194])[0]

      # phs_frac_1: 4 byte UnsignedMSB4, bytes 194-198
      self.phs_frac_1 = struct.unpack('>I', sfdu_block[194:198])[0]

      # phs_hi_2: 4 byte UnsignedMSB4, bytes 198-202
      self.phs_hi_2 = struct.unpack('>I', sfdu_block[198:202])[0]

      # phs_lo_2: 4 byte UnsignedMSB4, bytes 202-206
      self.phs_lo_2 = struct.unpack('>I', sfdu_block[202:206])[0]

      # phs_frac_2: 4 byte UnsignedMSB4, bytes 206-210
      self.phs_frac_2 = struct.unpack('>I', sfdu_block[206:210])[0]

      # phs_hi_3: 4 byte UnsignedMSB4, bytes 210-214
      self.phs_hi_3 = struct.unpack('>I', sfdu_block[210:214])[0]

      # phs_lo_3: 4 byte UnsignedMSB4, bytes 214-218
      self.phs_lo_3 = struct.unpack('>I', sfdu_block[214:218])[0]

      # phs_frac_3: 4 byte UnsignedMSB4, bytes 218-222
      self.phs_frac_3 = struct.unpack('>I', sfdu_block[218:222])[0]

      # phs_hi_4: 4 byte UnsignedMSB4, bytes 222-226
      self.phs_hi_4 = struct.unpack('>I', sfdu_block[222:226])[0]

      # phs_lo_4: 4 byte UnsignedMSB4, bytes 226-230
      self.phs_lo_4 = struct.unpack('>I', sfdu_block[226:230])[0]

      # phs_frac_4: 4 byte UnsignedMSB4, bytes 230-234
      self.phs_frac_4 = struct.unpack('>I', sfdu_block[230:234])[0]

      # phs_hi_5: 4 byte UnsignedMSB4, bytes 234-238
      self.phs_hi_5 = struct.unpack('>I', sfdu_block[234:238])[0]

      # phs_lo_5: 4 byte UnsignedMSB4, bytes 238-242
      self.phs_lo_5 = struct.unpack('>I', sfdu_block[238:242])[0]

      # phs_frac_5: 4 byte UnsignedMSB4, bytes 242-246
      self.phs_frac_5 = struct.unpack('>I', sfdu_block[242:246])[0]

      # phs_hi_6: 4 byte UnsignedMSB4, bytes 246-250
      self.phs_hi_6 = struct.unpack('>I', sfdu_block[246:250])[0]

      # phs_lo_6: 4 byte UnsignedMSB4, bytes 250-254
      self.phs_lo_6 = struct.unpack('>I', sfdu_block[250:254])[0]

      # phs_frac_6: 4 byte UnsignedMSB4, bytes 254-258
      self.phs_frac_6 = struct.unpack('>I', sfdu_block[254:258])[0]

      # phs_hi_7: 4 byte UnsignedMSB4, bytes 258-262
      self.phs_hi_7 = struct.unpack('>I', sfdu_block[258:262])[0]

      # phs_lo_7: 4 byte UnsignedMSB4, bytes 262-266
      self.phs_lo_7 = struct.unpack('>I', sfdu_block[262:266])[0]

      # phs_frac_7: 4 byte UnsignedMSB4, bytes 266-270
      self.phs_frac_7 = struct.unpack('>I', sfdu_block[266:270])[0]

      # phs_hi_8: 4 byte UnsignedMSB4, bytes 270-274
      self.phs_hi_8 = struct.unpack('>I', sfdu_block[270:274])[0]

      # phs_lo_8: 4 byte UnsignedMSB4, bytes 274-278
      self.phs_lo_8 = struct.unpack('>I', sfdu_block[274:278])[0]

      # phs_frac_8: 4 byte UnsignedMSB4, bytes 278-282
      self.phs_frac_8 = struct.unpack('>I', sfdu_block[278:282])[0]

      # phs_hi_9: 4 byte UnsignedMSB4, bytes 282-286
      self.phs_hi_9 = struct.unpack('>I', sfdu_block[282:286])[0]

      # phs_lo_9: 4 byte UnsignedMSB4, bytes 286-290
      self.phs_lo_9 = struct.unpack('>I', sfdu_block[286:290])[0]

      # phs_frac_9: 4 byte UnsignedMSB4, bytes 290-294
      self.phs_frac_9 = struct.unpack('>I', sfdu_block[290:294])[0]

      # phs_hi_avg: 4 byte UnsignedMSB4, bytes 294-298
      self.phs_hi_avg = struct.unpack('>I', sfdu_block[294:298])[0]

      # phs_lo_avg: 4 byte UnsignedMSB4, bytes 298-302
      self.phs_lo_avg = struct.unpack('>I', sfdu_block[298:302])[0]

      # phs_frac_avg: 4 byte UnsignedMSB4, bytes 302-306
      self.phs_frac_avg = struct.unpack('>I', sfdu_block[302:306])[0]

      # dl_freq: 8 byte IEEE754MSBDouble, bytes 306-314
      self.dl_freq = struct.unpack('>d', sfdu_block[306:314])[0]

      # dop_resid: 4 byte IEEE754MSBSingle, bytes 314-318
      self.dop_resid = struct.unpack('>f', sfdu_block[314:318])[0]

      # dop_noise: 4 byte IEEE754MSBSingle, bytes 318-322
      self.dop_noise = struct.unpack('>f', sfdu_block[318:322])[0]

      # slipped_cycles: 4 byte SignedMSB4, bytes 322-326
      self.slipped_cycles = struct.unpack('>i', sfdu_block[322:326])[0]

      # carr_loop_type: 1 byte UnsignedByte, bytes 326-327
      self.carr_loop_type = struct.unpack('>B', sfdu_block[326:327])[0]

      # snt_flag: 1 byte UnsignedByte, bytes 327-328
      self.snt_flag = struct.unpack('>B', sfdu_block[327:328])[0]

      # carr_resid_wt: 4 byte IEEE754MSBSingle, bytes 328-332
      self.carr_resid_wt = struct.unpack('>f', sfdu_block[328:332])[0]

      # sup_data_id: 8 byte ASCII_String, bytes 332-340
      self.sup_data_id = struct.unpack('>8s', sfdu_block[332:340])[0]

      # sup_data_rev: 8 byte ASCII_String, bytes 340-348
      self.sup_data_rev = struct.unpack('>8s', sfdu_block[340:348])[0]

      # prdx_time_offset: 8 byte IEEE754MSBDouble, bytes 348-356
      self.prdx_time_offset = struct.unpack('>d', sfdu_block[348:356])[0]

      # prdx_freq_offset: 8 byte IEEE754MSBDouble, bytes 356-364
      self.prdx_freq_offset = struct.unpack('>d', sfdu_block[356:364])[0]

      # carr_resid_tol_flag: 1 byte UnsignedByte, bytes 364-365
      self.carr_resid_tol_flag = struct.unpack('>B', sfdu_block[364:365])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 365-366
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[365:366])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 366-367
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[366:367])[0]

      # dop_mode_corr_flag: 1 byte UnsignedByte, bytes 367-368
      self.dop_mode_corr_flag = struct.unpack('>B', sfdu_block[367:368])[0]

      # ul_stn_corr_flag: 1 byte UnsignedByte, bytes 368-369
      self.ul_stn_corr_flag = struct.unpack('>B', sfdu_block[368:369])[0]

      # reserve1: 1 byte UnsignedByte, bytes 369-370
      self.reserve1 = sfdu_block[369:370]

      # reserve8: 8 byte UnsignedMSB8, bytes 370-378
      self.reserve8 = sfdu_block[370:378]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class UplinkSequentialRangingPhaseTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 02 - Tracking CHDO - Uplink Sequential Ranging Phase CHDO
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.stn_cal = -1
      self.ul_stn_cal = -1
      self.ul_cal_freq = -1
      self.cal_std_dev = -1
      self.cal_pts = -1
      self.ul_rng_phs = -1
      self.transmit_switch_stat = -1
      self.invert = -1
      self.transmit_op_pwr = -1
      self.template_id = ''
      self.t1 = -1
      self.t2 = -1
      self.t3 = -1
      self.first_comp_num = -1
      self.last_comp_num = -1
      self.chop_comp_num = -1
      self.num_drvid = -1
      self.transmit_inphs_time_year = -1
      self.transmit_inphs_time_doy = -1
      self.transmit_inphs_time_sec = -1
      self.carr_sup_rng_modul = -1
      self.rng_modul_amp = -1
      self.exc_scalar_num = -1
      self.exc_scalar_den = -1
      self.rng_cycle_time = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.clock_waveform = -1
      self.chop_start_num = -1
      self.rng_meas_type = -1
      self.fabricated_sfdu_flag = -1
      self.reserve6 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '             stn_cal = %f \n' % self.stn_cal
      out += '          ul_stn_cal = %f \n' % self.ul_stn_cal
      out += '         ul_cal_freq = %f \n' % self.ul_cal_freq
      out += '         cal_std_dev = %f \n' % self.cal_std_dev
      out += '             cal_pts = %i \n' % self.cal_pts
      out += '          ul_rng_phs = %f \n' % self.ul_rng_phs
      out += 'transmit_switch_stat = %i \n' % self.transmit_switch_stat
      out += '              invert = %i \n' % self.invert
      out += '     transmit_op_pwr = %f \n' % self.transmit_op_pwr
      out += '         template_id = %s \n' % self.template_id
      out += '                  t1 = %i \n' % self.t1
      out += '                  t2 = %i \n' % self.t2
      out += '                  t3 = %i \n' % self.t3
      out += '      first_comp_num = %i \n' % self.first_comp_num
      out += '       last_comp_num = %i \n' % self.last_comp_num
      out += '       chop_comp_num = %i \n' % self.chop_comp_num
      out += '           num_drvid = %i \n' % self.num_drvid
      out += 'transmit_inphs_time_year = %i \n' % self.transmit_inphs_time_year
      out += 'transmit_inphs_time_doy = %i \n' % self.transmit_inphs_time_doy
      out += 'transmit_inphs_time_sec = %f \n' % self.transmit_inphs_time_sec
      out += '  carr_sup_rng_modul = %f \n' % self.carr_sup_rng_modul
      out += '       rng_modul_amp = %i \n' % self.rng_modul_amp
      out += '      exc_scalar_num = %i \n' % self.exc_scalar_num
      out += '      exc_scalar_den = %i \n' % self.exc_scalar_den
      out += '      rng_cycle_time = %f \n' % self.rng_cycle_time
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += '      clock_waveform = %i \n' % self.clock_waveform
      out += '      chop_start_num = %i \n' % self.chop_start_num
      out += '       rng_meas_type = %i \n' % self.rng_meas_type
      out += 'fabricated_sfdu_flag = %i \n' % self.fabricated_sfdu_flag
      out += '            reserve6 = %s \n' % self.reserve6
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 102-104
      self.chdo_type = struct.unpack('>H', sfdu_block[102:104])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 104-106
      self.chdo_length = struct.unpack('>H', sfdu_block[104:106])[0]

      # stn_cal: 8 byte IEEE754MSBDouble, bytes 106-114
      self.stn_cal = struct.unpack('>d', sfdu_block[106:114])[0]

      # ul_stn_cal: 8 byte IEEE754MSBDouble, bytes 114-122
      self.ul_stn_cal = struct.unpack('>d', sfdu_block[114:122])[0]

      # ul_cal_freq: 8 byte IEEE754MSBDouble, bytes 122-130
      self.ul_cal_freq = struct.unpack('>d', sfdu_block[122:130])[0]

      # cal_std_dev: 4 byte IEEE754MSBSingle, bytes 130-134
      self.cal_std_dev = struct.unpack('>f', sfdu_block[130:134])[0]

      # cal_pts: 2 byte UnsignedMSB2, bytes 134-136
      self.cal_pts = struct.unpack('>H', sfdu_block[134:136])[0]

      # ul_rng_phs: 8 byte IEEE754MSBDouble, bytes 136-144
      self.ul_rng_phs = struct.unpack('>d', sfdu_block[136:144])[0]

      # transmit_switch_stat: 1 byte UnsignedByte, bytes 144-145
      self.transmit_switch_stat = struct.unpack('>B', sfdu_block[144:145])[0]

      # invert: 1 byte UnsignedByte, bytes 145-146
      self.invert = struct.unpack('>B', sfdu_block[145:146])[0]

      # transmit_op_pwr: 4 byte IEEE754MSBSingle, bytes 146-150
      self.transmit_op_pwr = struct.unpack('>f', sfdu_block[146:150])[0]

      # template_id: 8 byte ASCII_String, bytes 150-158
      self.template_id = struct.unpack('>8s', sfdu_block[150:158])[0]

      # t1: 2 byte UnsignedMSB2, bytes 158-160
      self.t1 = struct.unpack('>H', sfdu_block[158:160])[0]

      # t2: 2 byte UnsignedMSB2, bytes 160-162
      self.t2 = struct.unpack('>H', sfdu_block[160:162])[0]

      # t3: 2 byte UnsignedMSB2, bytes 162-164
      self.t3 = struct.unpack('>H', sfdu_block[162:164])[0]

      # first_comp_num: 1 byte UnsignedByte, bytes 164-165
      self.first_comp_num = struct.unpack('>B', sfdu_block[164:165])[0]

      # last_comp_num: 1 byte UnsignedByte, bytes 165-166
      self.last_comp_num = struct.unpack('>B', sfdu_block[165:166])[0]

      # chop_comp_num: 1 byte UnsignedByte, bytes 166-167
      self.chop_comp_num = struct.unpack('>B', sfdu_block[166:167])[0]

      # num_drvid: 1 byte UnsignedByte, bytes 167-168
      self.num_drvid = struct.unpack('>B', sfdu_block[167:168])[0]

      # transmit_inphs_time_year: 2 byte UnsignedMSB2, bytes 168-170
      self.transmit_inphs_time_year = struct.unpack('>H', sfdu_block[168:170])[0]

      # transmit_inphs_time_doy: 2 byte UnsignedMSB2, bytes 170-172
      self.transmit_inphs_time_doy = struct.unpack('>H', sfdu_block[170:172])[0]

      # transmit_inphs_time_sec: 8 byte IEEE754MSBDouble, bytes 172-180
      self.transmit_inphs_time_sec = struct.unpack('>d', sfdu_block[172:180])[0]

      # carr_sup_rng_modul: 4 byte IEEE754MSBSingle, bytes 180-184
      self.carr_sup_rng_modul = struct.unpack('>f', sfdu_block[180:184])[0]

      # rng_modul_amp: 2 byte UnsignedMSB2, bytes 184-186
      self.rng_modul_amp = struct.unpack('>H', sfdu_block[184:186])[0]

      # exc_scalar_num: 4 byte UnsignedMSB4, bytes 186-190
      self.exc_scalar_num = struct.unpack('>I', sfdu_block[186:190])[0]

      # exc_scalar_den: 4 byte UnsignedMSB4, bytes 190-194
      self.exc_scalar_den = struct.unpack('>I', sfdu_block[190:194])[0]

      # rng_cycle_time: 8 byte IEEE754MSBDouble, bytes 194-202
      self.rng_cycle_time = struct.unpack('>d', sfdu_block[194:202])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 202-203
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[202:203])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 203-204
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[203:204])[0]

      # clock_waveform: 1 byte UnsignedByte, bytes 204-205
      self.clock_waveform = struct.unpack('>B', sfdu_block[204:205])[0]

      # chop_start_num: 1 byte UnsignedByte, bytes 205-206
      self.chop_start_num = struct.unpack('>B', sfdu_block[205:206])[0]

      # rng_meas_type: 1 byte UnsignedByte, bytes 206-207
      self.rng_meas_type = struct.unpack('>B', sfdu_block[206:207])[0]

      # fabricated_sfdu_flag: 1 byte UnsignedByte, bytes 207-208
      self.fabricated_sfdu_flag = struct.unpack('>B', sfdu_block[207:208])[0]

      # reserve6: 6 byte UnsignedMSB6, bytes 208-214
      self.reserve6 = sfdu_block[208:214]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class DownlinkSequentialRangingPhaseTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 03 - Tracking CHDO - Downlink Sequential Ranging Phase
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.stn_cal = -1
      self.dl_stn_cal = -1
      self.dl_cal_freq = -1
      self.cal_std_dev = -1
      self.cal_pts = -1
      self.dl_rng_phs = -1
      self.figure_merit = -1
      self.rng_resid = -1
      self.drvid = -1
      self.rtlt = -1
      self.pcn0 = -1
      self.pcn0_resid = -1
      self.pdn0 = -1
      self.pdn0_resid = -1
      self.prn0 = -1
      self.prn0_resid = -1
      self.system_noise_temp = -1
      self.carr_loop_type = -1
      self.snt_flag = -1
      self.carr_resid_wt = -1
      self.template_id = ''
      self.invert = -1
      self.correl_type = -1
      self.t1 = -1
      self.t2 = -1
      self.t3 = -1
      self.first_comp_num = -1
      self.last_comp_num = -1
      self.chop_comp_num = -1
      self.num_drvid = -1
      self.rcv_inphs_time_year = -1
      self.rcv_inphs_time_doy = -1
      self.rcv_inphs_time_sec = -1
      self.exc_scalar_num = -1
      self.exc_scalar_den = -1
      self.rng_cycle_time = -1
      self.inphs_correl = -1
      self.quad_phs_correl = -1
      self.metrics_vld_flag = -1
      self.correl_vld_flag = -1
      self.rng_resid_tol_flag = -1
      self.drvid_tol_flag = -1
      self.prn0_resid_tol_flag = -1
      self.rng_sigma_tol_flag = -1
      self.rng_vld_flag = -1
      self.rng_config_flag = -1
      self.rng_hw_flag = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.dop_mode_corr_flag = -1
      self.ul_stn_corr_flag = -1
      self.chop_start_num = -1
      self.rng_meas_type = -1
      self.stn_cal_corr_flag = -1
      self.reserve6 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '             stn_cal = %f \n' % self.stn_cal
      out += '          dl_stn_cal = %f \n' % self.dl_stn_cal
      out += '         dl_cal_freq = %f \n' % self.dl_cal_freq
      out += '         cal_std_dev = %f \n' % self.cal_std_dev
      out += '             cal_pts = %i \n' % self.cal_pts
      out += '          dl_rng_phs = %f \n' % self.dl_rng_phs
      out += '        figure_merit = %f \n' % self.figure_merit
      out += '           rng_resid = %f \n' % self.rng_resid
      out += '               drvid = %f \n' % self.drvid
      out += '                rtlt = %f \n' % self.rtlt
      out += '                pcn0 = %f \n' % self.pcn0
      out += '          pcn0_resid = %f \n' % self.pcn0_resid
      out += '                pdn0 = %f \n' % self.pdn0
      out += '          pdn0_resid = %f \n' % self.pdn0_resid
      out += '                prn0 = %f \n' % self.prn0
      out += '          prn0_resid = %f \n' % self.prn0_resid
      out += '   system_noise_temp = %f \n' % self.system_noise_temp
      out += '      carr_loop_type = %i \n' % self.carr_loop_type
      out += '            snt_flag = %i \n' % self.snt_flag
      out += '       carr_resid_wt = %f \n' % self.carr_resid_wt
      out += '         template_id = %s \n' % self.template_id
      out += '              invert = %i \n' % self.invert
      out += '         correl_type = %i \n' % self.correl_type
      out += '                  t1 = %i \n' % self.t1
      out += '                  t2 = %i \n' % self.t2
      out += '                  t3 = %i \n' % self.t3
      out += '      first_comp_num = %i \n' % self.first_comp_num
      out += '       last_comp_num = %i \n' % self.last_comp_num
      out += '       chop_comp_num = %i \n' % self.chop_comp_num
      out += '           num_drvid = %i \n' % self.num_drvid
      out += ' rcv_inphs_time_year = %i \n' % self.rcv_inphs_time_year
      out += '  rcv_inphs_time_doy = %i \n' % self.rcv_inphs_time_doy
      out += '  rcv_inphs_time_sec = %f \n' % self.rcv_inphs_time_sec
      out += '      exc_scalar_num = %i \n' % self.exc_scalar_num
      out += '      exc_scalar_den = %i \n' % self.exc_scalar_den
      out += '      rng_cycle_time = %f \n' % self.rng_cycle_time
      out += '        inphs_correl = %f \n' % self.inphs_correl
      out += '     quad_phs_correl = %f \n' % self.quad_phs_correl
      out += '    metrics_vld_flag = %i \n' % self.metrics_vld_flag
      out += '     correl_vld_flag = %i \n' % self.correl_vld_flag
      out += '  rng_resid_tol_flag = %i \n' % self.rng_resid_tol_flag
      out += '      drvid_tol_flag = %i \n' % self.drvid_tol_flag
      out += ' prn0_resid_tol_flag = %i \n' % self.prn0_resid_tol_flag
      out += '  rng_sigma_tol_flag = %i \n' % self.rng_sigma_tol_flag
      out += '        rng_vld_flag = %i \n' % self.rng_vld_flag
      out += '     rng_config_flag = %i \n' % self.rng_config_flag
      out += '         rng_hw_flag = %i \n' % self.rng_hw_flag
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += '  dop_mode_corr_flag = %i \n' % self.dop_mode_corr_flag
      out += '    ul_stn_corr_flag = %i \n' % self.ul_stn_corr_flag
      out += '      chop_start_num = %i \n' % self.chop_start_num
      out += '       rng_meas_type = %i \n' % self.rng_meas_type
      out += '   stn_cal_corr_flag = %i \n' % self.stn_cal_corr_flag
      out += '            reserve6 = %s \n' % self.reserve6
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 146-148
      self.chdo_type = struct.unpack('>H', sfdu_block[146:148])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 148-150
      self.chdo_length = struct.unpack('>H', sfdu_block[148:150])[0]

      # stn_cal: 8 byte IEEE754MSBDouble, bytes 150-158
      self.stn_cal = struct.unpack('>d', sfdu_block[150:158])[0]

      # dl_stn_cal: 8 byte IEEE754MSBDouble, bytes 158-166
      self.dl_stn_cal = struct.unpack('>d', sfdu_block[158:166])[0]

      # dl_cal_freq: 8 byte IEEE754MSBDouble, bytes 166-174
      self.dl_cal_freq = struct.unpack('>d', sfdu_block[166:174])[0]

      # cal_std_dev: 4 byte IEEE754MSBSingle, bytes 174-178
      self.cal_std_dev = struct.unpack('>f', sfdu_block[174:178])[0]

      # cal_pts: 2 byte UnsignedMSB2, bytes 178-180
      self.cal_pts = struct.unpack('>H', sfdu_block[178:180])[0]

      # dl_rng_phs: 8 byte IEEE754MSBDouble, bytes 180-188
      self.dl_rng_phs = struct.unpack('>d', sfdu_block[180:188])[0]

      # figure_merit: 4 byte IEEE754MSBSingle, bytes 188-192
      self.figure_merit = struct.unpack('>f', sfdu_block[188:192])[0]

      # rng_resid: 8 byte IEEE754MSBDouble, bytes 192-200
      self.rng_resid = struct.unpack('>d', sfdu_block[192:200])[0]

      # drvid: 8 byte IEEE754MSBDouble, bytes 200-208
      self.drvid = struct.unpack('>d', sfdu_block[200:208])[0]

      # rtlt: 4 byte IEEE754MSBSingle, bytes 208-212
      self.rtlt = struct.unpack('>f', sfdu_block[208:212])[0]

      # pcn0: 4 byte IEEE754MSBSingle, bytes 212-216
      self.pcn0 = struct.unpack('>f', sfdu_block[212:216])[0]

      # pcn0_resid: 4 byte IEEE754MSBSingle, bytes 216-220
      self.pcn0_resid = struct.unpack('>f', sfdu_block[216:220])[0]

      # pdn0: 4 byte IEEE754MSBSingle, bytes 220-224
      self.pdn0 = struct.unpack('>f', sfdu_block[220:224])[0]

      # pdn0_resid: 4 byte IEEE754MSBSingle, bytes 224-228
      self.pdn0_resid = struct.unpack('>f', sfdu_block[224:228])[0]

      # prn0: 4 byte IEEE754MSBSingle, bytes 228-232
      self.prn0 = struct.unpack('>f', sfdu_block[228:232])[0]

      # prn0_resid: 4 byte IEEE754MSBSingle, bytes 232-236
      self.prn0_resid = struct.unpack('>f', sfdu_block[232:236])[0]

      # system_noise_temp: 4 byte IEEE754MSBSingle, bytes 236-240
      self.system_noise_temp = struct.unpack('>f', sfdu_block[236:240])[0]

      # carr_loop_type: 1 byte UnsignedByte, bytes 240-241
      self.carr_loop_type = struct.unpack('>B', sfdu_block[240:241])[0]

      # snt_flag: 1 byte UnsignedByte, bytes 241-242
      self.snt_flag = struct.unpack('>B', sfdu_block[241:242])[0]

      # carr_resid_wt: 4 byte IEEE754MSBSingle, bytes 242-246
      self.carr_resid_wt = struct.unpack('>f', sfdu_block[242:246])[0]

      # template_id: 8 byte ASCII_String, bytes 246-254
      self.template_id = struct.unpack('>8s', sfdu_block[246:254])[0]

      # invert: 1 byte UnsignedByte, bytes 254-255
      self.invert = struct.unpack('>B', sfdu_block[254:255])[0]

      # correl_type: 1 byte UnsignedByte, bytes 255-256
      self.correl_type = struct.unpack('>B', sfdu_block[255:256])[0]

      # t1: 2 byte UnsignedMSB2, bytes 256-258
      self.t1 = struct.unpack('>H', sfdu_block[256:258])[0]

      # t2: 2 byte UnsignedMSB2, bytes 258-260
      self.t2 = struct.unpack('>H', sfdu_block[258:260])[0]

      # t3: 2 byte UnsignedMSB2, bytes 260-262
      self.t3 = struct.unpack('>H', sfdu_block[260:262])[0]

      # first_comp_num: 1 byte UnsignedByte, bytes 262-263
      self.first_comp_num = struct.unpack('>B', sfdu_block[262:263])[0]

      # last_comp_num: 1 byte UnsignedByte, bytes 263-264
      self.last_comp_num = struct.unpack('>B', sfdu_block[263:264])[0]

      # chop_comp_num: 1 byte UnsignedByte, bytes 264-265
      self.chop_comp_num = struct.unpack('>B', sfdu_block[264:265])[0]

      # num_drvid: 1 byte UnsignedByte, bytes 265-266
      self.num_drvid = struct.unpack('>B', sfdu_block[265:266])[0]

      # rcv_inphs_time_year: 2 byte UnsignedMSB2, bytes 266-268
      self.rcv_inphs_time_year = struct.unpack('>H', sfdu_block[266:268])[0]

      # rcv_inphs_time_doy: 2 byte UnsignedMSB2, bytes 268-270
      self.rcv_inphs_time_doy = struct.unpack('>H', sfdu_block[268:270])[0]

      # rcv_inphs_time_sec: 8 byte IEEE754MSBDouble, bytes 270-278
      self.rcv_inphs_time_sec = struct.unpack('>d', sfdu_block[270:278])[0]

      # exc_scalar_num: 4 byte UnsignedMSB4, bytes 278-282
      self.exc_scalar_num = struct.unpack('>I', sfdu_block[278:282])[0]

      # exc_scalar_den: 4 byte UnsignedMSB4, bytes 282-286
      self.exc_scalar_den = struct.unpack('>I', sfdu_block[282:286])[0]

      # rng_cycle_time: 8 byte IEEE754MSBDouble, bytes 286-294
      self.rng_cycle_time = struct.unpack('>d', sfdu_block[286:294])[0]

      # inphs_correl: 4 byte IEEE754MSBSingle, bytes 294-298
      self.inphs_correl = struct.unpack('>f', sfdu_block[294:298])[0]

      # quad_phs_correl: 4 byte IEEE754MSBSingle, bytes 298-302
      self.quad_phs_correl = struct.unpack('>f', sfdu_block[298:302])[0]

      # metrics_vld_flag: 1 byte UnsignedByte, bytes 302-303
      self.metrics_vld_flag = struct.unpack('>B', sfdu_block[302:303])[0]

      # correl_vld_flag: 1 byte UnsignedByte, bytes 303-304
      self.correl_vld_flag = struct.unpack('>B', sfdu_block[303:304])[0]

      # rng_resid_tol_flag: 1 byte UnsignedByte, bytes 304-305
      self.rng_resid_tol_flag = struct.unpack('>B', sfdu_block[304:305])[0]

      # drvid_tol_flag: 1 byte UnsignedByte, bytes 305-306
      self.drvid_tol_flag = struct.unpack('>B', sfdu_block[305:306])[0]

      # prn0_resid_tol_flag: 1 byte UnsignedByte, bytes 306-307
      self.prn0_resid_tol_flag = struct.unpack('>B', sfdu_block[306:307])[0]

      # rng_sigma_tol_flag: 1 byte UnsignedByte, bytes 307-308
      self.rng_sigma_tol_flag = struct.unpack('>B', sfdu_block[307:308])[0]

      # rng_vld_flag: 1 byte UnsignedByte, bytes 308-309
      self.rng_vld_flag = struct.unpack('>B', sfdu_block[308:309])[0]

      # rng_config_flag: 1 byte UnsignedByte, bytes 309-310
      self.rng_config_flag = struct.unpack('>B', sfdu_block[309:310])[0]

      # rng_hw_flag: 1 byte UnsignedByte, bytes 310-311
      self.rng_hw_flag = struct.unpack('>B', sfdu_block[310:311])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 311-312
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[311:312])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 312-313
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[312:313])[0]

      # dop_mode_corr_flag: 1 byte UnsignedByte, bytes 313-314
      self.dop_mode_corr_flag = struct.unpack('>B', sfdu_block[313:314])[0]

      # ul_stn_corr_flag: 1 byte UnsignedByte, bytes 314-315
      self.ul_stn_corr_flag = struct.unpack('>B', sfdu_block[314:315])[0]

      # chop_start_num: 1 byte UnsignedByte, bytes 315-316
      self.chop_start_num = struct.unpack('>B', sfdu_block[315:316])[0]

      # rng_meas_type: 1 byte UnsignedByte, bytes 316-317
      self.rng_meas_type = struct.unpack('>B', sfdu_block[316:317])[0]

      # stn_cal_corr_flag: 1 byte UnsignedByte, bytes 317-318
      self.stn_cal_corr_flag = struct.unpack('>B', sfdu_block[317:318])[0]

      # reserve6: 6 byte UnsignedMSB6, bytes 318-324
      self.reserve6 = sfdu_block[318:324]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class UplinkPnRangingPhaseTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 04 - Tracking CHDO - UL PN Ranging Phase
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.stn_cal = -1
      self.ul_stn_cal = -1
      self.ul_cal_freq = -1
      self.cal_std_dev = -1
      self.cal_pts = -1
      self.ul_rng_phs = -1
      self.state_subcode1 = -1
      self.state_subcode2 = -1
      self.state_subcode3 = -1
      self.state_subcode4 = -1
      self.state_subcode5 = -1
      self.state_subcode6 = -1
      self.pn_clk_phs = -1
      self.transmit_switch_stat = -1
      self.invert = -1
      self.transmit_op_pwr = -1
      self.template_id = ''
      self.chip_rate = -1
      self.len_subcode1 = -1
      self.len_subcode2 = -1
      self.len_subcode3 = -1
      self.len_subcode4 = -1
      self.len_subcode5 = -1
      self.len_subcode6 = -1
      self.op_subcode1 = -1
      self.op_subcode2 = -1
      self.op_subcode3 = -1
      self.op_subcode4 = -1
      self.op_subcode5 = -1
      self.def_subcode1 = -1
      self.def_subcode2 = -1
      self.def_subcode3 = -1
      self.def_subcode4 = -1
      self.def_subcode5 = -1
      self.def_subcode6 = -1
      self.pn_code_length = -1
      self.transmit_inphs_time_year = -1
      self.transmit_inphs_time_doy = -1
      self.transmit_inphs_time_sec = -1
      self.carr_sup_rng_modul = -1
      self.rng_modul_amp = -1
      self.exc_scalar_num = -1
      self.exc_scalar_den = -1
      self.rng_cycle_time = -1
      self.clock_waveform = -1
      self.rng_meas_type = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.fabricated_sfdu_flag = -1
      self.op_subcode6 = -1
      self.ccsds_k = -1
      self.ccsds_l = -1
      self.reserve4 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '             stn_cal = %f \n' % self.stn_cal
      out += '          ul_stn_cal = %f \n' % self.ul_stn_cal
      out += '         ul_cal_freq = %f \n' % self.ul_cal_freq
      out += '         cal_std_dev = %f \n' % self.cal_std_dev
      out += '             cal_pts = %i \n' % self.cal_pts
      out += '          ul_rng_phs = %f \n' % self.ul_rng_phs
      out += '      state_subcode1 = %i \n' % self.state_subcode1
      out += '      state_subcode2 = %i \n' % self.state_subcode2
      out += '      state_subcode3 = %i \n' % self.state_subcode3
      out += '      state_subcode4 = %i \n' % self.state_subcode4
      out += '      state_subcode5 = %i \n' % self.state_subcode5
      out += '      state_subcode6 = %i \n' % self.state_subcode6
      out += '          pn_clk_phs = %f \n' % self.pn_clk_phs
      out += 'transmit_switch_stat = %i \n' % self.transmit_switch_stat
      out += '              invert = %i \n' % self.invert
      out += '     transmit_op_pwr = %f \n' % self.transmit_op_pwr
      out += '         template_id = %s \n' % self.template_id
      out += '           chip_rate = %i \n' % self.chip_rate
      out += '        len_subcode1 = %i \n' % self.len_subcode1
      out += '        len_subcode2 = %i \n' % self.len_subcode2
      out += '        len_subcode3 = %i \n' % self.len_subcode3
      out += '        len_subcode4 = %i \n' % self.len_subcode4
      out += '        len_subcode5 = %i \n' % self.len_subcode5
      out += '        len_subcode6 = %i \n' % self.len_subcode6
      out += '         op_subcode1 = %i \n' % self.op_subcode1
      out += '         op_subcode2 = %i \n' % self.op_subcode2
      out += '         op_subcode3 = %i \n' % self.op_subcode3
      out += '         op_subcode4 = %i \n' % self.op_subcode4
      out += '         op_subcode5 = %i \n' % self.op_subcode5
      out += '        def_subcode1 = %i \n' % self.def_subcode1
      out += '        def_subcode2 = %i \n' % self.def_subcode2
      out += '        def_subcode3 = %i \n' % self.def_subcode3
      out += '        def_subcode4 = %i \n' % self.def_subcode4
      out += '        def_subcode5 = %i \n' % self.def_subcode5
      out += '        def_subcode6 = %i \n' % self.def_subcode6
      out += '      pn_code_length = %i \n' % self.pn_code_length
      out += 'transmit_inphs_time_year = %i \n' % self.transmit_inphs_time_year
      out += 'transmit_inphs_time_doy = %i \n' % self.transmit_inphs_time_doy
      out += 'transmit_inphs_time_sec = %f \n' % self.transmit_inphs_time_sec
      out += '  carr_sup_rng_modul = %f \n' % self.carr_sup_rng_modul
      out += '       rng_modul_amp = %i \n' % self.rng_modul_amp
      out += '      exc_scalar_num = %i \n' % self.exc_scalar_num
      out += '      exc_scalar_den = %i \n' % self.exc_scalar_den
      out += '      rng_cycle_time = %f \n' % self.rng_cycle_time
      out += '      clock_waveform = %i \n' % self.clock_waveform
      out += '       rng_meas_type = %i \n' % self.rng_meas_type
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += 'fabricated_sfdu_flag = %i \n' % self.fabricated_sfdu_flag
      out += '         op_subcode6 = %i \n' % self.op_subcode6
      out += '             ccsds_k = %i \n' % self.ccsds_k
      out += '             ccsds_l = %i \n' % self.ccsds_l
      out += '            reserve4 = %s \n' % self.reserve4
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 102-104
      self.chdo_type = struct.unpack('>H', sfdu_block[102:104])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 104-106
      self.chdo_length = struct.unpack('>H', sfdu_block[104:106])[0]

      # stn_cal: 8 byte IEEE754MSBDouble, bytes 106-114
      self.stn_cal = struct.unpack('>d', sfdu_block[106:114])[0]

      # ul_stn_cal: 8 byte IEEE754MSBDouble, bytes 114-122
      self.ul_stn_cal = struct.unpack('>d', sfdu_block[114:122])[0]

      # ul_cal_freq: 8 byte IEEE754MSBDouble, bytes 122-130
      self.ul_cal_freq = struct.unpack('>d', sfdu_block[122:130])[0]

      # cal_std_dev: 4 byte IEEE754MSBSingle, bytes 130-134
      self.cal_std_dev = struct.unpack('>f', sfdu_block[130:134])[0]

      # cal_pts: 2 byte UnsignedMSB2, bytes 134-136
      self.cal_pts = struct.unpack('>H', sfdu_block[134:136])[0]

      # ul_rng_phs: 8 byte IEEE754MSBDouble, bytes 136-144
      self.ul_rng_phs = struct.unpack('>d', sfdu_block[136:144])[0]

      # state_subcode1: 1 byte UnsignedByte, bytes 144-145
      self.state_subcode1 = struct.unpack('>B', sfdu_block[144:145])[0]

      # state_subcode2: 1 byte UnsignedByte, bytes 145-146
      self.state_subcode2 = struct.unpack('>B', sfdu_block[145:146])[0]

      # state_subcode3: 1 byte UnsignedByte, bytes 146-147
      self.state_subcode3 = struct.unpack('>B', sfdu_block[146:147])[0]

      # state_subcode4: 1 byte UnsignedByte, bytes 147-148
      self.state_subcode4 = struct.unpack('>B', sfdu_block[147:148])[0]

      # state_subcode5: 1 byte UnsignedByte, bytes 148-149
      self.state_subcode5 = struct.unpack('>B', sfdu_block[148:149])[0]

      # state_subcode6: 1 byte UnsignedByte, bytes 149-150
      self.state_subcode6 = struct.unpack('>B', sfdu_block[149:150])[0]

      # pn_clk_phs: 8 byte IEEE754MSBDouble, bytes 150-158
      self.pn_clk_phs = struct.unpack('>d', sfdu_block[150:158])[0]

      # transmit_switch_stat: 1 byte UnsignedByte, bytes 158-159
      self.transmit_switch_stat = struct.unpack('>B', sfdu_block[158:159])[0]

      # invert: 1 byte UnsignedByte, bytes 159-160
      self.invert = struct.unpack('>B', sfdu_block[159:160])[0]

      # transmit_op_pwr: 4 byte IEEE754MSBSingle, bytes 160-164
      self.transmit_op_pwr = struct.unpack('>f', sfdu_block[160:164])[0]

      # template_id: 22 byte ASCII_String, bytes 164-186
      self.template_id = struct.unpack('>22s', sfdu_block[164:186])[0]

      # chip_rate: 1 byte UnsignedByte, bytes 186-187
      self.chip_rate = struct.unpack('>B', sfdu_block[186:187])[0]

      # len_subcode1: 1 byte UnsignedByte, bytes 187-188
      self.len_subcode1 = struct.unpack('>B', sfdu_block[187:188])[0]

      # len_subcode2: 1 byte UnsignedByte, bytes 188-189
      self.len_subcode2 = struct.unpack('>B', sfdu_block[188:189])[0]

      # len_subcode3: 1 byte UnsignedByte, bytes 189-190
      self.len_subcode3 = struct.unpack('>B', sfdu_block[189:190])[0]

      # len_subcode4: 1 byte UnsignedByte, bytes 190-191
      self.len_subcode4 = struct.unpack('>B', sfdu_block[190:191])[0]

      # len_subcode5: 1 byte UnsignedByte, bytes 191-192
      self.len_subcode5 = struct.unpack('>B', sfdu_block[191:192])[0]

      # len_subcode6: 1 byte UnsignedByte, bytes 192-193
      self.len_subcode6 = struct.unpack('>B', sfdu_block[192:193])[0]

      # op_subcode1: 1 byte UnsignedByte, bytes 193-194
      self.op_subcode1 = struct.unpack('>B', sfdu_block[193:194])[0]

      # op_subcode2: 1 byte UnsignedByte, bytes 194-195
      self.op_subcode2 = struct.unpack('>B', sfdu_block[194:195])[0]

      # op_subcode3: 1 byte UnsignedByte, bytes 195-196
      self.op_subcode3 = struct.unpack('>B', sfdu_block[195:196])[0]

      # op_subcode4: 1 byte UnsignedByte, bytes 196-197
      self.op_subcode4 = struct.unpack('>B', sfdu_block[196:197])[0]

      # op_subcode5: 1 byte UnsignedByte, bytes 197-198
      self.op_subcode5 = struct.unpack('>B', sfdu_block[197:198])[0]

      # def_subcode1: 8 byte UnsignedMSB8, bytes 198-206
      self.def_subcode1 = struct.unpack('>Q', sfdu_block[198:206])[0]

      # def_subcode2: 8 byte UnsignedMSB8, bytes 206-214
      self.def_subcode2 = struct.unpack('>Q', sfdu_block[206:214])[0]

      # def_subcode3: 8 byte UnsignedMSB8, bytes 214-222
      self.def_subcode3 = struct.unpack('>Q', sfdu_block[214:222])[0]

      # def_subcode4: 8 byte UnsignedMSB8, bytes 222-230
      self.def_subcode4 = struct.unpack('>Q', sfdu_block[222:230])[0]

      # def_subcode5: 8 byte UnsignedMSB8, bytes 230-238
      self.def_subcode5 = struct.unpack('>Q', sfdu_block[230:238])[0]

      # def_subcode6: 8 byte UnsignedMSB8, bytes 238-246
      self.def_subcode6 = struct.unpack('>Q', sfdu_block[238:246])[0]

      # pn_code_length: 4 byte UnsignedMSB4, bytes 246-250
      self.pn_code_length = struct.unpack('>I', sfdu_block[246:250])[0]

      # transmit_inphs_time_year: 2 byte UnsignedMSB2, bytes 250-252
      self.transmit_inphs_time_year = struct.unpack('>H', sfdu_block[250:252])[0]

      # transmit_inphs_time_doy: 2 byte UnsignedMSB2, bytes 252-254
      self.transmit_inphs_time_doy = struct.unpack('>H', sfdu_block[252:254])[0]

      # transmit_inphs_time_sec: 8 byte IEEE754MSBDouble, bytes 254-262
      self.transmit_inphs_time_sec = struct.unpack('>d', sfdu_block[254:262])[0]

      # carr_sup_rng_modul: 4 byte IEEE754MSBSingle, bytes 262-266
      self.carr_sup_rng_modul = struct.unpack('>f', sfdu_block[262:266])[0]

      # rng_modul_amp: 2 byte UnsignedMSB2, bytes 266-268
      self.rng_modul_amp = struct.unpack('>H', sfdu_block[266:268])[0]

      # exc_scalar_num: 4 byte UnsignedMSB4, bytes 268-272
      self.exc_scalar_num = struct.unpack('>I', sfdu_block[268:272])[0]

      # exc_scalar_den: 4 byte UnsignedMSB4, bytes 272-276
      self.exc_scalar_den = struct.unpack('>I', sfdu_block[272:276])[0]

      # rng_cycle_time: 8 byte IEEE754MSBDouble, bytes 276-284
      self.rng_cycle_time = struct.unpack('>d', sfdu_block[276:284])[0]

      # clock_waveform: 1 byte UnsignedByte, bytes 284-285
      self.clock_waveform = struct.unpack('>B', sfdu_block[284:285])[0]

      # rng_meas_type: 1 byte UnsignedByte, bytes 285-286
      self.rng_meas_type = struct.unpack('>B', sfdu_block[285:286])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 286-287
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[286:287])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 287-288
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[287:288])[0]

      # fabricated_sfdu_flag: 1 byte UnsignedByte, bytes 288-289
      self.fabricated_sfdu_flag = struct.unpack('>B', sfdu_block[288:289])[0]

      # op_subcode6: 1 byte UnsignedByte, bytes 289-290
      self.op_subcode6 = struct.unpack('>B', sfdu_block[289:290])[0]

      # ccsds_k: 1 byte UnsignedByte, bytes 290-291
      self.ccsds_k = struct.unpack('>B', sfdu_block[290:291])[0]

      # ccsds_l: 1 byte UnsignedByte, bytes 291-292
      self.ccsds_l = struct.unpack('>B', sfdu_block[291:292])[0]

      # reserve4: 4 byte UnsignedMSB4, bytes 292-296
      self.reserve4 = sfdu_block[292:296]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class DownlinkPnRangingPhaseTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 05 - Tracking CHDO - Downlink Pn ranging Phase
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.stn_cal = -1
      self.dl_stn_cal = -1
      self.dl_cal_freq = -1
      self.cal_std_dev = -1
      self.cal_pts = -1
      self.dl_rng_phs = -1
      self.figure_merit = -1
      self.rng_resid = -1
      self.drvid = -1
      self.rtlt = -1
      self.pcn0 = -1
      self.pcn0_resid = -1
      self.pdn0 = -1
      self.pdn0_resid = -1
      self.prn0 = -1
      self.prn0_resid = -1
      self.system_noise_temp = -1
      self.state_subcode1 = -1
      self.state_subcode2 = -1
      self.state_subcode3 = -1
      self.state_subcode4 = -1
      self.state_subcode5 = -1
      self.state_subcode6 = -1
      self.pn_clk_phs = -1
      self.carr_loop_type = -1
      self.snt_flag = -1
      self.carr_resid_wt = -1
      self.template_id = ''
      self.invert = -1
      self.correl_type = -1
      self.int_time = -1
      self.chip_rate = -1
      self.len_subcode1 = -1
      self.len_subcode2 = -1
      self.len_subcode3 = -1
      self.len_subcode4 = -1
      self.len_subcode5 = -1
      self.len_subcode6 = -1
      self.op_subcode1 = -1
      self.op_subcode2 = -1
      self.op_subcode3 = -1
      self.op_subcode4 = -1
      self.op_subcode5 = -1
      self.def_subcode1 = -1
      self.def_subcode2 = -1
      self.def_subcode3 = -1
      self.def_subcode4 = -1
      self.def_subcode5 = -1
      self.def_subcode6 = -1
      self.pn_code_length = -1
      self.rcv_inphs_time_year = -1
      self.rcv_inphs_time_doy = -1
      self.rcv_inphs_time_sec = -1
      self.exc_scalar_num = -1
      self.exc_scalar_den = -1
      self.rng_cycle_time = -1
      self.inphs_correl = -1
      self.quad_phs_correl = -1
      self.metrics_vld_flag = -1
      self.correl_vld_flag = -1
      self.rng_resid_tol_flag = -1
      self.drvid_tol_flag = -1
      self.prn0_resid_tol_flag = -1
      self.rng_sigma_tol_flag = -1
      self.rng_vld_flag = -1
      self.rng_config_flag = -1
      self.rng_hw_flag = -1
      self.rng_meas_type = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.dop_mode_corr_flag = -1
      self.ul_stn_corr_flag = -1
      self.stn_cal_corr_flag = -1
      self.op_subcode6 = -1
      self.ccsds_k = -1
      self.ccsds_l = -1
      self.reserve4 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '             stn_cal = %f \n' % self.stn_cal
      out += '          dl_stn_cal = %f \n' % self.dl_stn_cal
      out += '         dl_cal_freq = %f \n' % self.dl_cal_freq
      out += '         cal_std_dev = %f \n' % self.cal_std_dev
      out += '             cal_pts = %i \n' % self.cal_pts
      out += '          dl_rng_phs = %f \n' % self.dl_rng_phs
      out += '        figure_merit = %f \n' % self.figure_merit
      out += '           rng_resid = %f \n' % self.rng_resid
      out += '               drvid = %f \n' % self.drvid
      out += '                rtlt = %f \n' % self.rtlt
      out += '                pcn0 = %f \n' % self.pcn0
      out += '          pcn0_resid = %f \n' % self.pcn0_resid
      out += '                pdn0 = %f \n' % self.pdn0
      out += '          pdn0_resid = %f \n' % self.pdn0_resid
      out += '                prn0 = %f \n' % self.prn0
      out += '          prn0_resid = %f \n' % self.prn0_resid
      out += '   system_noise_temp = %f \n' % self.system_noise_temp
      out += '      state_subcode1 = %i \n' % self.state_subcode1
      out += '      state_subcode2 = %i \n' % self.state_subcode2
      out += '      state_subcode3 = %i \n' % self.state_subcode3
      out += '      state_subcode4 = %i \n' % self.state_subcode4
      out += '      state_subcode5 = %i \n' % self.state_subcode5
      out += '      state_subcode6 = %i \n' % self.state_subcode6
      out += '          pn_clk_phs = %f \n' % self.pn_clk_phs
      out += '      carr_loop_type = %i \n' % self.carr_loop_type
      out += '            snt_flag = %i \n' % self.snt_flag
      out += '       carr_resid_wt = %f \n' % self.carr_resid_wt
      out += '         template_id = %s \n' % self.template_id
      out += '              invert = %i \n' % self.invert
      out += '         correl_type = %i \n' % self.correl_type
      out += '            int_time = %i \n' % self.int_time
      out += '           chip_rate = %i \n' % self.chip_rate
      out += '        len_subcode1 = %i \n' % self.len_subcode1
      out += '        len_subcode2 = %i \n' % self.len_subcode2
      out += '        len_subcode3 = %i \n' % self.len_subcode3
      out += '        len_subcode4 = %i \n' % self.len_subcode4
      out += '        len_subcode5 = %i \n' % self.len_subcode5
      out += '        len_subcode6 = %i \n' % self.len_subcode6
      out += '         op_subcode1 = %i \n' % self.op_subcode1
      out += '         op_subcode2 = %i \n' % self.op_subcode2
      out += '         op_subcode3 = %i \n' % self.op_subcode3
      out += '         op_subcode4 = %i \n' % self.op_subcode4
      out += '         op_subcode5 = %i \n' % self.op_subcode5
      out += '        def_subcode1 = %i \n' % self.def_subcode1
      out += '        def_subcode2 = %i \n' % self.def_subcode2
      out += '        def_subcode3 = %i \n' % self.def_subcode3
      out += '        def_subcode4 = %i \n' % self.def_subcode4
      out += '        def_subcode5 = %i \n' % self.def_subcode5
      out += '        def_subcode6 = %i \n' % self.def_subcode6
      out += '      pn_code_length = %i \n' % self.pn_code_length
      out += ' rcv_inphs_time_year = %i \n' % self.rcv_inphs_time_year
      out += '  rcv_inphs_time_doy = %i \n' % self.rcv_inphs_time_doy
      out += '  rcv_inphs_time_sec = %f \n' % self.rcv_inphs_time_sec
      out += '      exc_scalar_num = %i \n' % self.exc_scalar_num
      out += '      exc_scalar_den = %i \n' % self.exc_scalar_den
      out += '      rng_cycle_time = %f \n' % self.rng_cycle_time
      out += '        inphs_correl = %f \n' % self.inphs_correl
      out += '     quad_phs_correl = %f \n' % self.quad_phs_correl
      out += '    metrics_vld_flag = %i \n' % self.metrics_vld_flag
      out += '     correl_vld_flag = %i \n' % self.correl_vld_flag
      out += '  rng_resid_tol_flag = %i \n' % self.rng_resid_tol_flag
      out += '      drvid_tol_flag = %i \n' % self.drvid_tol_flag
      out += ' prn0_resid_tol_flag = %i \n' % self.prn0_resid_tol_flag
      out += '  rng_sigma_tol_flag = %i \n' % self.rng_sigma_tol_flag
      out += '        rng_vld_flag = %i \n' % self.rng_vld_flag
      out += '     rng_config_flag = %i \n' % self.rng_config_flag
      out += '         rng_hw_flag = %i \n' % self.rng_hw_flag
      out += '       rng_meas_type = %i \n' % self.rng_meas_type
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += '  dop_mode_corr_flag = %i \n' % self.dop_mode_corr_flag
      out += '    ul_stn_corr_flag = %i \n' % self.ul_stn_corr_flag
      out += '   stn_cal_corr_flag = %i \n' % self.stn_cal_corr_flag
      out += '         op_subcode6 = %i \n' % self.op_subcode6
      out += '             ccsds_k = %i \n' % self.ccsds_k
      out += '             ccsds_l = %i \n' % self.ccsds_l
      out += '            reserve4 = %s \n' % self.reserve4
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 146-148
      self.chdo_type = struct.unpack('>H', sfdu_block[146:148])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 148-150
      self.chdo_length = struct.unpack('>H', sfdu_block[148:150])[0]

      # stn_cal: 8 byte IEEE754MSBDouble, bytes 150-158
      self.stn_cal = struct.unpack('>d', sfdu_block[150:158])[0]

      # dl_stn_cal: 8 byte IEEE754MSBDouble, bytes 158-166
      self.dl_stn_cal = struct.unpack('>d', sfdu_block[158:166])[0]

      # dl_cal_freq: 8 byte IEEE754MSBDouble, bytes 166-174
      self.dl_cal_freq = struct.unpack('>d', sfdu_block[166:174])[0]

      # cal_std_dev: 4 byte IEEE754MSBSingle, bytes 174-178
      self.cal_std_dev = struct.unpack('>f', sfdu_block[174:178])[0]

      # cal_pts: 2 byte UnsignedMSB2, bytes 178-180
      self.cal_pts = struct.unpack('>H', sfdu_block[178:180])[0]

      # dl_rng_phs: 8 byte IEEE754MSBDouble, bytes 180-188
      self.dl_rng_phs = struct.unpack('>d', sfdu_block[180:188])[0]

      # figure_merit: 4 byte IEEE754MSBSingle, bytes 188-192
      self.figure_merit = struct.unpack('>f', sfdu_block[188:192])[0]

      # rng_resid: 8 byte IEEE754MSBDouble, bytes 192-200
      self.rng_resid = struct.unpack('>d', sfdu_block[192:200])[0]

      # drvid: 8 byte IEEE754MSBDouble, bytes 200-208
      self.drvid = struct.unpack('>d', sfdu_block[200:208])[0]

      # rtlt: 4 byte IEEE754MSBSingle, bytes 208-212
      self.rtlt = struct.unpack('>f', sfdu_block[208:212])[0]

      # pcn0: 4 byte IEEE754MSBSingle, bytes 212-216
      self.pcn0 = struct.unpack('>f', sfdu_block[212:216])[0]

      # pcn0_resid: 4 byte IEEE754MSBSingle, bytes 216-220
      self.pcn0_resid = struct.unpack('>f', sfdu_block[216:220])[0]

      # pdn0: 4 byte IEEE754MSBSingle, bytes 220-224
      self.pdn0 = struct.unpack('>f', sfdu_block[220:224])[0]

      # pdn0_resid: 4 byte IEEE754MSBSingle, bytes 224-228
      self.pdn0_resid = struct.unpack('>f', sfdu_block[224:228])[0]

      # prn0: 4 byte IEEE754MSBSingle, bytes 228-232
      self.prn0 = struct.unpack('>f', sfdu_block[228:232])[0]

      # prn0_resid: 4 byte IEEE754MSBSingle, bytes 232-236
      self.prn0_resid = struct.unpack('>f', sfdu_block[232:236])[0]

      # system_noise_temp: 4 byte IEEE754MSBSingle, bytes 236-240
      self.system_noise_temp = struct.unpack('>f', sfdu_block[236:240])[0]

      # state_subcode1: 1 byte UnsignedByte, bytes 240-241
      self.state_subcode1 = struct.unpack('>B', sfdu_block[240:241])[0]

      # state_subcode2: 1 byte UnsignedByte, bytes 241-242
      self.state_subcode2 = struct.unpack('>B', sfdu_block[241:242])[0]

      # state_subcode3: 1 byte UnsignedByte, bytes 242-243
      self.state_subcode3 = struct.unpack('>B', sfdu_block[242:243])[0]

      # state_subcode4: 1 byte UnsignedByte, bytes 243-244
      self.state_subcode4 = struct.unpack('>B', sfdu_block[243:244])[0]

      # state_subcode5: 1 byte UnsignedByte, bytes 244-245
      self.state_subcode5 = struct.unpack('>B', sfdu_block[244:245])[0]

      # state_subcode6: 1 byte UnsignedByte, bytes 245-246
      self.state_subcode6 = struct.unpack('>B', sfdu_block[245:246])[0]

      # pn_clk_phs: 8 byte IEEE754MSBDouble, bytes 246-254
      self.pn_clk_phs = struct.unpack('>d', sfdu_block[246:254])[0]

      # carr_loop_type: 1 byte UnsignedByte, bytes 254-255
      self.carr_loop_type = struct.unpack('>B', sfdu_block[254:255])[0]

      # snt_flag: 1 byte UnsignedByte, bytes 255-256
      self.snt_flag = struct.unpack('>B', sfdu_block[255:256])[0]

      # carr_resid_wt: 4 byte IEEE754MSBSingle, bytes 256-260
      self.carr_resid_wt = struct.unpack('>f', sfdu_block[256:260])[0]

      # template_id: 20 byte ASCII_String, bytes 260-280
      self.template_id = struct.unpack('>20s', sfdu_block[260:280])[0]

      # invert: 1 byte UnsignedByte, bytes 280-281
      self.invert = struct.unpack('>B', sfdu_block[280:281])[0]

      # correl_type: 1 byte UnsignedByte, bytes 281-282
      self.correl_type = struct.unpack('>B', sfdu_block[281:282])[0]

      # int_time: 4 byte UnsignedMSB4, bytes 282-286
      self.int_time = struct.unpack('>I', sfdu_block[282:286])[0]

      # chip_rate: 1 byte UnsignedByte, bytes 286-287
      self.chip_rate = struct.unpack('>B', sfdu_block[286:287])[0]

      # len_subcode1: 1 byte UnsignedByte, bytes 287-288
      self.len_subcode1 = struct.unpack('>B', sfdu_block[287:288])[0]

      # len_subcode2: 1 byte UnsignedByte, bytes 288-289
      self.len_subcode2 = struct.unpack('>B', sfdu_block[288:289])[0]

      # len_subcode3: 1 byte UnsignedByte, bytes 289-290
      self.len_subcode3 = struct.unpack('>B', sfdu_block[289:290])[0]

      # len_subcode4: 1 byte UnsignedByte, bytes 290-291
      self.len_subcode4 = struct.unpack('>B', sfdu_block[290:291])[0]

      # len_subcode5: 1 byte UnsignedByte, bytes 291-292
      self.len_subcode5 = struct.unpack('>B', sfdu_block[291:292])[0]

      # len_subcode6: 1 byte UnsignedByte, bytes 292-293
      self.len_subcode6 = struct.unpack('>B', sfdu_block[292:293])[0]

      # op_subcode1: 1 byte UnsignedByte, bytes 293-294
      self.op_subcode1 = struct.unpack('>B', sfdu_block[293:294])[0]

      # op_subcode2: 1 byte UnsignedByte, bytes 294-295
      self.op_subcode2 = struct.unpack('>B', sfdu_block[294:295])[0]

      # op_subcode3: 1 byte UnsignedByte, bytes 295-296
      self.op_subcode3 = struct.unpack('>B', sfdu_block[295:296])[0]

      # op_subcode4: 1 byte UnsignedByte, bytes 296-297
      self.op_subcode4 = struct.unpack('>B', sfdu_block[296:297])[0]

      # op_subcode5: 1 byte UnsignedByte, bytes 297-298
      self.op_subcode5 = struct.unpack('>B', sfdu_block[297:298])[0]

      # def_subcode1: 8 byte UnsignedMSB8, bytes 298-306
      self.def_subcode1 = struct.unpack('>Q', sfdu_block[298:306])[0]

      # def_subcode2: 8 byte UnsignedMSB8, bytes 306-314
      self.def_subcode2 = struct.unpack('>Q', sfdu_block[306:314])[0]

      # def_subcode3: 8 byte UnsignedMSB8, bytes 314-322
      self.def_subcode3 = struct.unpack('>Q', sfdu_block[314:322])[0]

      # def_subcode4: 8 byte UnsignedMSB8, bytes 322-330
      self.def_subcode4 = struct.unpack('>Q', sfdu_block[322:330])[0]

      # def_subcode5: 8 byte UnsignedMSB8, bytes 330-338
      self.def_subcode5 = struct.unpack('>Q', sfdu_block[330:338])[0]

      # def_subcode6: 8 byte UnsignedMSB8, bytes 338-346
      self.def_subcode6 = struct.unpack('>Q', sfdu_block[338:346])[0]

      # pn_code_length: 4 byte UnsignedMSB4, bytes 346-350
      self.pn_code_length = struct.unpack('>I', sfdu_block[346:350])[0]

      # rcv_inphs_time_year: 2 byte UnsignedMSB2, bytes 350-352
      self.rcv_inphs_time_year = struct.unpack('>H', sfdu_block[350:352])[0]

      # rcv_inphs_time_doy: 2 byte UnsignedMSB2, bytes 352-354
      self.rcv_inphs_time_doy = struct.unpack('>H', sfdu_block[352:354])[0]

      # rcv_inphs_time_sec: 8 byte IEEE754MSBDouble, bytes 354-362
      self.rcv_inphs_time_sec = struct.unpack('>d', sfdu_block[354:362])[0]

      # exc_scalar_num: 4 byte UnsignedMSB4, bytes 362-366
      self.exc_scalar_num = struct.unpack('>I', sfdu_block[362:366])[0]

      # exc_scalar_den: 4 byte UnsignedMSB4, bytes 366-370
      self.exc_scalar_den = struct.unpack('>I', sfdu_block[366:370])[0]

      # rng_cycle_time: 8 byte IEEE754MSBDouble, bytes 370-378
      self.rng_cycle_time = struct.unpack('>d', sfdu_block[370:378])[0]

      # inphs_correl: 4 byte IEEE754MSBSingle, bytes 378-382
      self.inphs_correl = struct.unpack('>f', sfdu_block[378:382])[0]

      # quad_phs_correl: 4 byte IEEE754MSBSingle, bytes 382-386
      self.quad_phs_correl = struct.unpack('>f', sfdu_block[382:386])[0]

      # metrics_vld_flag: 1 byte UnsignedByte, bytes 386-387
      self.metrics_vld_flag = struct.unpack('>B', sfdu_block[386:387])[0]

      # correl_vld_flag: 1 byte UnsignedByte, bytes 387-388
      self.correl_vld_flag = struct.unpack('>B', sfdu_block[387:388])[0]

      # rng_resid_tol_flag: 1 byte UnsignedByte, bytes 388-389
      self.rng_resid_tol_flag = struct.unpack('>B', sfdu_block[388:389])[0]

      # drvid_tol_flag: 1 byte UnsignedByte, bytes 389-390
      self.drvid_tol_flag = struct.unpack('>B', sfdu_block[389:390])[0]

      # prn0_resid_tol_flag: 1 byte UnsignedByte, bytes 390-391
      self.prn0_resid_tol_flag = struct.unpack('>B', sfdu_block[390:391])[0]

      # rng_sigma_tol_flag: 1 byte UnsignedByte, bytes 391-392
      self.rng_sigma_tol_flag = struct.unpack('>B', sfdu_block[391:392])[0]

      # rng_vld_flag: 1 byte UnsignedByte, bytes 392-393
      self.rng_vld_flag = struct.unpack('>B', sfdu_block[392:393])[0]

      # rng_config_flag: 1 byte UnsignedByte, bytes 393-394
      self.rng_config_flag = struct.unpack('>B', sfdu_block[393:394])[0]

      # rng_hw_flag: 1 byte UnsignedByte, bytes 394-395
      self.rng_hw_flag = struct.unpack('>B', sfdu_block[394:395])[0]

      # rng_meas_type: 1 byte UnsignedByte, bytes 395-396
      self.rng_meas_type = struct.unpack('>B', sfdu_block[395:396])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 396-397
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[396:397])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 397-398
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[397:398])[0]

      # dop_mode_corr_flag: 1 byte UnsignedByte, bytes 398-399
      self.dop_mode_corr_flag = struct.unpack('>B', sfdu_block[398:399])[0]

      # ul_stn_corr_flag: 1 byte UnsignedByte, bytes 399-400
      self.ul_stn_corr_flag = struct.unpack('>B', sfdu_block[399:400])[0]

      # stn_cal_corr_flag: 1 byte UnsignedByte, bytes 400-401
      self.stn_cal_corr_flag = struct.unpack('>B', sfdu_block[400:401])[0]

      # op_subcode6: 1 byte UnsignedByte, bytes 401-402
      self.op_subcode6 = struct.unpack('>B', sfdu_block[401:402])[0]

      # ccsds_k: 1 byte UnsignedByte, bytes 402-403
      self.ccsds_k = struct.unpack('>B', sfdu_block[402:403])[0]

      # ccsds_l: 1 byte UnsignedByte, bytes 403-404
      self.ccsds_l = struct.unpack('>B', sfdu_block[403:404])[0]

      # reserve4: 4 byte UnsignedMSB4, bytes 404-408
      self.reserve4 = sfdu_block[404:408]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class DopplerCountTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 06 - Tracking CHDO - Doppler Count
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.ref_rcv_type = -1
      self.reserve1a = ''
      self.sampl_interval = -1
      self.rcv_sig_lvl = -1
      self.ul_freq = -1
      self.dop_cnt_bias_freq = -1
      self.dop_cnt = -1
      self.dop_pseudo_resid = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.dop_mode_corr_flag = -1
      self.ul_stn_corr_flag = -1
      self.dl_band_corr_flag = -1
      self.dop_vld_flag = -1
      self.reserve8 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '        ref_rcv_type = %i \n' % self.ref_rcv_type
      out += '           reserve1a = %s \n' % self.reserve1a
      out += '      sampl_interval = %f \n' % self.sampl_interval
      out += '         rcv_sig_lvl = %f \n' % self.rcv_sig_lvl
      out += '             ul_freq = %f \n' % self.ul_freq
      out += '   dop_cnt_bias_freq = %f \n' % self.dop_cnt_bias_freq
      out += '             dop_cnt = %f \n' % self.dop_cnt
      out += '    dop_pseudo_resid = %f \n' % self.dop_pseudo_resid
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += '  dop_mode_corr_flag = %i \n' % self.dop_mode_corr_flag
      out += '    ul_stn_corr_flag = %i \n' % self.ul_stn_corr_flag
      out += '   dl_band_corr_flag = %i \n' % self.dl_band_corr_flag
      out += '        dop_vld_flag = %i \n' % self.dop_vld_flag
      out += '            reserve8 = %s \n' % self.reserve8
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 160-162
      self.chdo_type = struct.unpack('>H', sfdu_block[160:162])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 162-164
      self.chdo_length = struct.unpack('>H', sfdu_block[162:164])[0]

      # ref_rcv_type: 1 byte UnsignedByte, bytes 164-165
      self.ref_rcv_type = struct.unpack('>B', sfdu_block[164:165])[0]

      # reserve1a: 1 byte UnsignedByte, bytes 165-166
      self.reserve1a = sfdu_block[165:166]

      # sampl_interval: 4 byte IEEE754MSBSingle, bytes 166-170
      self.sampl_interval = struct.unpack('>f', sfdu_block[166:170])[0]

      # rcv_sig_lvl: 4 byte IEEE754MSBSingle, bytes 170-174
      self.rcv_sig_lvl = struct.unpack('>f', sfdu_block[170:174])[0]

      # ul_freq: 8 byte IEEE754MSBDouble, bytes 174-182
      self.ul_freq = struct.unpack('>d', sfdu_block[174:182])[0]

      # dop_cnt_bias_freq: 8 byte IEEE754MSBDouble, bytes 182-190
      self.dop_cnt_bias_freq = struct.unpack('>d', sfdu_block[182:190])[0]

      # dop_cnt: 8 byte IEEE754MSBDouble, bytes 190-198
      self.dop_cnt = struct.unpack('>d', sfdu_block[190:198])[0]

      # dop_pseudo_resid: 8 byte IEEE754MSBDouble, bytes 198-206
      self.dop_pseudo_resid = struct.unpack('>d', sfdu_block[198:206])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 206-207
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[206:207])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 207-208
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[207:208])[0]

      # dop_mode_corr_flag: 1 byte UnsignedByte, bytes 208-209
      self.dop_mode_corr_flag = struct.unpack('>B', sfdu_block[208:209])[0]

      # ul_stn_corr_flag: 1 byte UnsignedByte, bytes 209-210
      self.ul_stn_corr_flag = struct.unpack('>B', sfdu_block[209:210])[0]

      # dl_band_corr_flag: 1 byte UnsignedByte, bytes 210-211
      self.dl_band_corr_flag = struct.unpack('>B', sfdu_block[210:211])[0]

      # dop_vld_flag: 1 byte UnsignedByte, bytes 211-212
      self.dop_vld_flag = struct.unpack('>B', sfdu_block[211:212])[0]

      # reserve8: 8 byte UnsignedMSB8, bytes 212-220
      self.reserve8 = sfdu_block[212:220]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class SequentialRangeTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 07 - Tracking CHDO - Sequential Range
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.ul_stn_cal = -1
      self.dl_stn_cal = -1
      self.meas_rng = -1
      self.rng_obs = -1
      self.rng_obs_dl = -1
      self.clock_waveform = -1
      self.chop_start_num = -1
      self.figure_merit = -1
      self.drvid = -1
      self.rtlt = -1
      self.prn0 = -1
      self.transmit_pwr = -1
      self.invert = -1
      self.correl_type = -1
      self.t1 = -1
      self.t2 = -1
      self.t3 = -1
      self.first_comp_num = -1
      self.last_comp_num = -1
      self.chop_comp_num = -1
      self.num_drvid = -1
      self.transmit_inphs_time = -1
      self.rcv_inphs_time = -1
      self.carr_sup_rng_modul = -1
      self.exc_scalar_num = -1
      self.exc_scalar_den = -1
      self.rng_cycle_time = -1
      self.rng_modulo = -1
      self.inphs_correl = -1
      self.quad_phs_correl = -1
      self.ul_freq = -1
      self.rng_type = -1
      self.fabricated_ul_flag = -1
      self.rng_noise = -1
      self.rng_prefit_resid = -1
      self.rng_dl_prefit_resid = -1
      self.rng_prefit_resid_vld_flag = -1
      self.rng_dl_prefit_resid_vld_flag = -1
      self.rng_resid_tol_value = -1
      self.drvid_tol_value = -1
      self.prn0_resid_tol_value = -1
      self.rng_sigma_tol_value = -1
      self.fom_tol_value = -1
      self.rng_resid_tol_flag = -1
      self.drvid_tol_flag = -1
      self.prn0_resid_tol_flag = -1
      self.rng_sigma_tol_flag = -1
      self.rng_vld_flag = -1
      self.rng_config_flag = -1
      self.stn_cal_corr_flag = -1
      self.rng_chan_num = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.reserve6 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '          ul_stn_cal = %f \n' % self.ul_stn_cal
      out += '          dl_stn_cal = %f \n' % self.dl_stn_cal
      out += '            meas_rng = %f \n' % self.meas_rng
      out += '             rng_obs = %f \n' % self.rng_obs
      out += '          rng_obs_dl = %f \n' % self.rng_obs_dl
      out += '      clock_waveform = %i \n' % self.clock_waveform
      out += '      chop_start_num = %i \n' % self.chop_start_num
      out += '        figure_merit = %f \n' % self.figure_merit
      out += '               drvid = %f \n' % self.drvid
      out += '                rtlt = %f \n' % self.rtlt
      out += '                prn0 = %f \n' % self.prn0
      out += '        transmit_pwr = %f \n' % self.transmit_pwr
      out += '              invert = %i \n' % self.invert
      out += '         correl_type = %i \n' % self.correl_type
      out += '                  t1 = %i \n' % self.t1
      out += '                  t2 = %i \n' % self.t2
      out += '                  t3 = %i \n' % self.t3
      out += '      first_comp_num = %i \n' % self.first_comp_num
      out += '       last_comp_num = %i \n' % self.last_comp_num
      out += '       chop_comp_num = %i \n' % self.chop_comp_num
      out += '           num_drvid = %i \n' % self.num_drvid
      out += ' transmit_inphs_time = %f \n' % self.transmit_inphs_time
      out += '      rcv_inphs_time = %f \n' % self.rcv_inphs_time
      out += '  carr_sup_rng_modul = %f \n' % self.carr_sup_rng_modul
      out += '      exc_scalar_num = %i \n' % self.exc_scalar_num
      out += '      exc_scalar_den = %i \n' % self.exc_scalar_den
      out += '      rng_cycle_time = %f \n' % self.rng_cycle_time
      out += '          rng_modulo = %i \n' % self.rng_modulo
      out += '        inphs_correl = %f \n' % self.inphs_correl
      out += '     quad_phs_correl = %f \n' % self.quad_phs_correl
      out += '             ul_freq = %f \n' % self.ul_freq
      out += '            rng_type = %i \n' % self.rng_type
      out += '  fabricated_ul_flag = %i \n' % self.fabricated_ul_flag
      out += '           rng_noise = %f \n' % self.rng_noise
      out += '    rng_prefit_resid = %f \n' % self.rng_prefit_resid
      out += ' rng_dl_prefit_resid = %f \n' % self.rng_dl_prefit_resid
      out += 'rng_prefit_resid_vld_flag = %i \n' % self.rng_prefit_resid_vld_flag
      out += 'rng_dl_prefit_resid_vld_flag = %i \n' % self.rng_dl_prefit_resid_vld_flag
      out += ' rng_resid_tol_value = %f \n' % self.rng_resid_tol_value
      out += '     drvid_tol_value = %f \n' % self.drvid_tol_value
      out += 'prn0_resid_tol_value = %f \n' % self.prn0_resid_tol_value
      out += ' rng_sigma_tol_value = %f \n' % self.rng_sigma_tol_value
      out += '       fom_tol_value = %f \n' % self.fom_tol_value
      out += '  rng_resid_tol_flag = %i \n' % self.rng_resid_tol_flag
      out += '      drvid_tol_flag = %i \n' % self.drvid_tol_flag
      out += ' prn0_resid_tol_flag = %i \n' % self.prn0_resid_tol_flag
      out += '  rng_sigma_tol_flag = %i \n' % self.rng_sigma_tol_flag
      out += '        rng_vld_flag = %i \n' % self.rng_vld_flag
      out += '     rng_config_flag = %i \n' % self.rng_config_flag
      out += '   stn_cal_corr_flag = %i \n' % self.stn_cal_corr_flag
      out += '        rng_chan_num = %i \n' % self.rng_chan_num
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += '            reserve6 = %s \n' % self.reserve6
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 160-162
      self.chdo_type = struct.unpack('>H', sfdu_block[160:162])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 162-164
      self.chdo_length = struct.unpack('>H', sfdu_block[162:164])[0]

      # ul_stn_cal: 8 byte IEEE754MSBDouble, bytes 164-172
      self.ul_stn_cal = struct.unpack('>d', sfdu_block[164:172])[0]

      # dl_stn_cal: 8 byte IEEE754MSBDouble, bytes 172-180
      self.dl_stn_cal = struct.unpack('>d', sfdu_block[172:180])[0]

      # meas_rng: 8 byte IEEE754MSBDouble, bytes 180-188
      self.meas_rng = struct.unpack('>d', sfdu_block[180:188])[0]

      # rng_obs: 8 byte IEEE754MSBDouble, bytes 188-196
      self.rng_obs = struct.unpack('>d', sfdu_block[188:196])[0]

      # rng_obs_dl: 8 byte IEEE754MSBDouble, bytes 196-204
      self.rng_obs_dl = struct.unpack('>d', sfdu_block[196:204])[0]

      # clock_waveform: 1 byte UnsignedByte, bytes 204-205
      self.clock_waveform = struct.unpack('>B', sfdu_block[204:205])[0]

      # chop_start_num: 1 byte UnsignedByte, bytes 205-206
      self.chop_start_num = struct.unpack('>B', sfdu_block[205:206])[0]

      # figure_merit: 4 byte IEEE754MSBSingle, bytes 206-210
      self.figure_merit = struct.unpack('>f', sfdu_block[206:210])[0]

      # drvid: 8 byte IEEE754MSBDouble, bytes 210-218
      self.drvid = struct.unpack('>d', sfdu_block[210:218])[0]

      # rtlt: 4 byte IEEE754MSBSingle, bytes 218-222
      self.rtlt = struct.unpack('>f', sfdu_block[218:222])[0]

      # prn0: 4 byte IEEE754MSBSingle, bytes 222-226
      self.prn0 = struct.unpack('>f', sfdu_block[222:226])[0]

      # transmit_pwr: 4 byte IEEE754MSBSingle, bytes 226-230
      self.transmit_pwr = struct.unpack('>f', sfdu_block[226:230])[0]

      # invert: 1 byte UnsignedByte, bytes 230-231
      self.invert = struct.unpack('>B', sfdu_block[230:231])[0]

      # correl_type: 1 byte UnsignedByte, bytes 231-232
      self.correl_type = struct.unpack('>B', sfdu_block[231:232])[0]

      # t1: 2 byte UnsignedMSB2, bytes 232-234
      self.t1 = struct.unpack('>H', sfdu_block[232:234])[0]

      # t2: 2 byte UnsignedMSB2, bytes 234-236
      self.t2 = struct.unpack('>H', sfdu_block[234:236])[0]

      # t3: 2 byte UnsignedMSB2, bytes 236-238
      self.t3 = struct.unpack('>H', sfdu_block[236:238])[0]

      # first_comp_num: 1 byte UnsignedByte, bytes 238-239
      self.first_comp_num = struct.unpack('>B', sfdu_block[238:239])[0]

      # last_comp_num: 1 byte UnsignedByte, bytes 239-240
      self.last_comp_num = struct.unpack('>B', sfdu_block[239:240])[0]

      # chop_comp_num: 1 byte UnsignedByte, bytes 240-241
      self.chop_comp_num = struct.unpack('>B', sfdu_block[240:241])[0]

      # num_drvid: 1 byte UnsignedByte, bytes 241-242
      self.num_drvid = struct.unpack('>B', sfdu_block[241:242])[0]

      # transmit_inphs_time: 4 byte IEEE754MSBSingle, bytes 242-246
      self.transmit_inphs_time = struct.unpack('>f', sfdu_block[242:246])[0]

      # rcv_inphs_time: 4 byte IEEE754MSBSingle, bytes 246-250
      self.rcv_inphs_time = struct.unpack('>f', sfdu_block[246:250])[0]

      # carr_sup_rng_modul: 4 byte IEEE754MSBSingle, bytes 250-254
      self.carr_sup_rng_modul = struct.unpack('>f', sfdu_block[250:254])[0]

      # exc_scalar_num: 4 byte UnsignedMSB4, bytes 254-258
      self.exc_scalar_num = struct.unpack('>I', sfdu_block[254:258])[0]

      # exc_scalar_den: 4 byte UnsignedMSB4, bytes 258-262
      self.exc_scalar_den = struct.unpack('>I', sfdu_block[258:262])[0]

      # rng_cycle_time: 8 byte IEEE754MSBDouble, bytes 262-270
      self.rng_cycle_time = struct.unpack('>d', sfdu_block[262:270])[0]

      # rng_modulo: 4 byte UnsignedMSB4, bytes 270-274
      self.rng_modulo = struct.unpack('>I', sfdu_block[270:274])[0]

      # inphs_correl: 4 byte IEEE754MSBSingle, bytes 274-278
      self.inphs_correl = struct.unpack('>f', sfdu_block[274:278])[0]

      # quad_phs_correl: 4 byte IEEE754MSBSingle, bytes 278-282
      self.quad_phs_correl = struct.unpack('>f', sfdu_block[278:282])[0]

      # ul_freq: 8 byte IEEE754MSBDouble, bytes 282-290
      self.ul_freq = struct.unpack('>d', sfdu_block[282:290])[0]

      # rng_type: 1 byte UnsignedByte, bytes 290-291
      self.rng_type = struct.unpack('>B', sfdu_block[290:291])[0]

      # fabricated_ul_flag: 1 byte UnsignedByte, bytes 291-292
      self.fabricated_ul_flag = struct.unpack('>B', sfdu_block[291:292])[0]

      # rng_noise: 4 byte IEEE754MSBSingle, bytes 292-296
      self.rng_noise = struct.unpack('>f', sfdu_block[292:296])[0]

      # rng_prefit_resid: 8 byte IEEE754MSBDouble, bytes 296-304
      self.rng_prefit_resid = struct.unpack('>d', sfdu_block[296:304])[0]

      # rng_dl_prefit_resid: 8 byte IEEE754MSBDouble, bytes 304-312
      self.rng_dl_prefit_resid = struct.unpack('>d', sfdu_block[304:312])[0]

      # rng_prefit_resid_vld_flag: 1 byte UnsignedByte, bytes 312-313
      self.rng_prefit_resid_vld_flag = struct.unpack('>B', sfdu_block[312:313])[0]

      # rng_dl_prefit_resid_vld_flag: 1 byte UnsignedByte, bytes 313-314
      self.rng_dl_prefit_resid_vld_flag = struct.unpack('>B', sfdu_block[313:314])[0]

      # rng_resid_tol_value: 4 byte IEEE754MSBSingle, bytes 314-318
      self.rng_resid_tol_value = struct.unpack('>f', sfdu_block[314:318])[0]

      # drvid_tol_value: 4 byte IEEE754MSBSingle, bytes 318-322
      self.drvid_tol_value = struct.unpack('>f', sfdu_block[318:322])[0]

      # prn0_resid_tol_value: 4 byte IEEE754MSBSingle, bytes 322-326
      self.prn0_resid_tol_value = struct.unpack('>f', sfdu_block[322:326])[0]

      # rng_sigma_tol_value: 4 byte IEEE754MSBSingle, bytes 326-330
      self.rng_sigma_tol_value = struct.unpack('>f', sfdu_block[326:330])[0]

      # fom_tol_value: 4 byte IEEE754MSBSingle, bytes 330-334
      self.fom_tol_value = struct.unpack('>f', sfdu_block[330:334])[0]

      # rng_resid_tol_flag: 1 byte UnsignedByte, bytes 334-335
      self.rng_resid_tol_flag = struct.unpack('>B', sfdu_block[334:335])[0]

      # drvid_tol_flag: 1 byte UnsignedByte, bytes 335-336
      self.drvid_tol_flag = struct.unpack('>B', sfdu_block[335:336])[0]

      # prn0_resid_tol_flag: 1 byte UnsignedByte, bytes 336-337
      self.prn0_resid_tol_flag = struct.unpack('>B', sfdu_block[336:337])[0]

      # rng_sigma_tol_flag: 1 byte UnsignedByte, bytes 337-338
      self.rng_sigma_tol_flag = struct.unpack('>B', sfdu_block[337:338])[0]

      # rng_vld_flag: 1 byte UnsignedByte, bytes 338-339
      self.rng_vld_flag = struct.unpack('>B', sfdu_block[338:339])[0]

      # rng_config_flag: 1 byte UnsignedByte, bytes 339-340
      self.rng_config_flag = struct.unpack('>B', sfdu_block[339:340])[0]

      # stn_cal_corr_flag: 1 byte UnsignedByte, bytes 340-341
      self.stn_cal_corr_flag = struct.unpack('>B', sfdu_block[340:341])[0]

      # rng_chan_num: 1 byte UnsignedByte, bytes 341-342
      self.rng_chan_num = struct.unpack('>B', sfdu_block[341:342])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 342-343
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[342:343])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 343-344
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[343:344])[0]

      # reserve6: 6 byte UnsignedMSB6, bytes 344-350
      self.reserve6 = sfdu_block[344:350]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class AngleTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 08 - Tracking CHDO - Angles
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.source_type = -1
      self.ang_type = -1
      self.ang_vld_flag = -1
      self.ang_mode = -1
      self.conscan_mode = -1
      self.acq_aid_mode = -1
      self.ang1 = -1
      self.ang2 = -1
      self.ang1_pseudo_resid = -1
      self.ang2_pseudo_resid = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1
      self.reserve2 = ''
      self.reserve8 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '         source_type = %i \n' % self.source_type
      out += '            ang_type = %i \n' % self.ang_type
      out += '        ang_vld_flag = %i \n' % self.ang_vld_flag
      out += '            ang_mode = %i \n' % self.ang_mode
      out += '        conscan_mode = %i \n' % self.conscan_mode
      out += '        acq_aid_mode = %i \n' % self.acq_aid_mode
      out += '                ang1 = %f \n' % self.ang1
      out += '                ang2 = %f \n' % self.ang2
      out += '   ang1_pseudo_resid = %f \n' % self.ang1_pseudo_resid
      out += '   ang2_pseudo_resid = %f \n' % self.ang2_pseudo_resid
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      out += '            reserve2 = %s \n' % self.reserve2
      out += '            reserve8 = %s \n' % self.reserve8
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 160-162
      self.chdo_type = struct.unpack('>H', sfdu_block[160:162])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 162-164
      self.chdo_length = struct.unpack('>H', sfdu_block[162:164])[0]

      # source_type: 1 byte UnsignedByte, bytes 164-165
      self.source_type = struct.unpack('>B', sfdu_block[164:165])[0]

      # ang_type: 1 byte UnsignedByte, bytes 165-166
      self.ang_type = struct.unpack('>B', sfdu_block[165:166])[0]

      # ang_vld_flag: 1 byte UnsignedByte, bytes 166-167
      self.ang_vld_flag = struct.unpack('>B', sfdu_block[166:167])[0]

      # ang_mode: 1 byte UnsignedByte, bytes 167-168
      self.ang_mode = struct.unpack('>B', sfdu_block[167:168])[0]

      # conscan_mode: 1 byte UnsignedByte, bytes 168-169
      self.conscan_mode = struct.unpack('>B', sfdu_block[168:169])[0]

      # acq_aid_mode: 1 byte UnsignedByte, bytes 169-170
      self.acq_aid_mode = struct.unpack('>B', sfdu_block[169:170])[0]

      # ang1: 4 byte IEEE754MSBSingle, bytes 170-174
      self.ang1 = struct.unpack('>f', sfdu_block[170:174])[0]

      # ang2: 4 byte IEEE754MSBSingle, bytes 174-178
      self.ang2 = struct.unpack('>f', sfdu_block[174:178])[0]

      # ang1_pseudo_resid: 4 byte IEEE754MSBSingle, bytes 178-182
      self.ang1_pseudo_resid = struct.unpack('>f', sfdu_block[178:182])[0]

      # ang2_pseudo_resid: 4 byte IEEE754MSBSingle, bytes 182-186
      self.ang2_pseudo_resid = struct.unpack('>f', sfdu_block[182:186])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 186-187
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[186:187])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 187-188
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[187:188])[0]

      # reserve2: 2 byte UnsignedMSB2, bytes 188-190
      self.reserve2 = sfdu_block[188:190]

      # reserve8: 8 byte UnsignedMSB8, bytes 190-198
      self.reserve8 = sfdu_block[190:198]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class RampTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 09 - Tracking CHDO - Ramp
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.ul_hi_phs_cycles = -1
      self.ul_lo_phs_cycles = -1
      self.ul_frac_phs_cycles = -1
      self.ramp_freq = -1
      self.ramp_rate = -1
      self.ramp_type = -1
      self.fabricated_sfdu_flag = -1
      self.reserve8 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '    ul_hi_phs_cycles = %i \n' % self.ul_hi_phs_cycles
      out += '    ul_lo_phs_cycles = %i \n' % self.ul_lo_phs_cycles
      out += '  ul_frac_phs_cycles = %i \n' % self.ul_frac_phs_cycles
      out += '           ramp_freq = %f \n' % self.ramp_freq
      out += '           ramp_rate = %f \n' % self.ramp_rate
      out += '           ramp_type = %i \n' % self.ramp_type
      out += 'fabricated_sfdu_flag = %i \n' % self.fabricated_sfdu_flag
      out += '            reserve8 = %s \n' % self.reserve8
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 102-104
      self.chdo_type = struct.unpack('>H', sfdu_block[102:104])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 104-106
      self.chdo_length = struct.unpack('>H', sfdu_block[104:106])[0]

      # ul_hi_phs_cycles: 4 byte UnsignedMSB4, bytes 106-110
      self.ul_hi_phs_cycles = struct.unpack('>I', sfdu_block[106:110])[0]

      # ul_lo_phs_cycles: 4 byte UnsignedMSB4, bytes 110-114
      self.ul_lo_phs_cycles = struct.unpack('>I', sfdu_block[110:114])[0]

      # ul_frac_phs_cycles: 4 byte UnsignedMSB4, bytes 114-118
      self.ul_frac_phs_cycles = struct.unpack('>I', sfdu_block[114:118])[0]

      # ramp_freq: 8 byte IEEE754MSBDouble, bytes 118-126
      self.ramp_freq = struct.unpack('>d', sfdu_block[118:126])[0]

      # ramp_rate: 8 byte IEEE754MSBDouble, bytes 126-134
      self.ramp_rate = struct.unpack('>d', sfdu_block[126:134])[0]

      # ramp_type: 1 byte UnsignedByte, bytes 134-135
      self.ramp_type = struct.unpack('>B', sfdu_block[134:135])[0]

      # fabricated_sfdu_flag: 1 byte UnsignedByte, bytes 135-136
      self.fabricated_sfdu_flag = struct.unpack('>B', sfdu_block[135:136])[0]

      # reserve8: 8 byte UnsignedMSB8, bytes 136-144
      self.reserve8 = sfdu_block[136:144]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class VlbiCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 10 - Tracking CHDO - VLBI
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.clk_off_epoch_year = -1
      self.clk_off_epoch_doy = -1
      self.clk_off_epoch_sec = -1
      self.clk_off_1 = -1
      self.clk_off_2 = -1
      self.phs_cal_flag = -1
      self.chan_sampl_flag = -1
      self.quasar_id = ''
      self.quasar_id_num = -1
      self.data_qual_flag = -1
      self.freq_chan_num = -1
      self.mode_id = -1
      self.modulo_flag = -1
      self.ref_freq = -1
      self.modulus = -1
      self.dod_cnt_time = -1
      self.dod_obs = -1
      self.dor_obs = -1
      self.Reserve20 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '  clk_off_epoch_year = %i \n' % self.clk_off_epoch_year
      out += '   clk_off_epoch_doy = %i \n' % self.clk_off_epoch_doy
      out += '   clk_off_epoch_sec = %f \n' % self.clk_off_epoch_sec
      out += '           clk_off_1 = %f \n' % self.clk_off_1
      out += '           clk_off_2 = %f \n' % self.clk_off_2
      out += '        phs_cal_flag = %i \n' % self.phs_cal_flag
      out += '     chan_sampl_flag = %i \n' % self.chan_sampl_flag
      out += '           quasar_id = %s \n' % self.quasar_id
      out += '       quasar_id_num = %i \n' % self.quasar_id_num
      out += '      data_qual_flag = %i \n' % self.data_qual_flag
      out += '       freq_chan_num = %i \n' % self.freq_chan_num
      out += '             mode_id = %i \n' % self.mode_id
      out += '         modulo_flag = %i \n' % self.modulo_flag
      out += '            ref_freq = %f \n' % self.ref_freq
      out += '             modulus = %f \n' % self.modulus
      out += '        dod_cnt_time = %f \n' % self.dod_cnt_time
      out += '             dod_obs = %f \n' % self.dod_obs
      out += '             dor_obs = %f \n' % self.dor_obs
      out += '           Reserve20 = %s \n' % self.Reserve20
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 124-126
      self.chdo_type = struct.unpack('>H', sfdu_block[124:126])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 126-128
      self.chdo_length = struct.unpack('>H', sfdu_block[126:128])[0]

      # clk_off_epoch_year: 2 byte UnsignedMSB2, bytes 128-130
      self.clk_off_epoch_year = struct.unpack('>H', sfdu_block[128:130])[0]

      # clk_off_epoch_doy: 2 byte UnsignedMSB2, bytes 130-132
      self.clk_off_epoch_doy = struct.unpack('>H', sfdu_block[130:132])[0]

      # clk_off_epoch_sec: 8 byte IEEE754MSBDouble, bytes 132-140
      self.clk_off_epoch_sec = struct.unpack('>d', sfdu_block[132:140])[0]

      # clk_off_1: 4 byte IEEE754MSBSingle, bytes 140-144
      self.clk_off_1 = struct.unpack('>f', sfdu_block[140:144])[0]

      # clk_off_2: 4 byte IEEE754MSBSingle, bytes 144-148
      self.clk_off_2 = struct.unpack('>f', sfdu_block[144:148])[0]

      # phs_cal_flag: 1 byte UnsignedByte, bytes 148-149
      self.phs_cal_flag = struct.unpack('>B', sfdu_block[148:149])[0]

      # chan_sampl_flag: 1 byte UnsignedByte, bytes 149-150
      self.chan_sampl_flag = struct.unpack('>B', sfdu_block[149:150])[0]

      # quasar_id: 12 byte ASCII_String, bytes 150-162
      self.quasar_id = struct.unpack('>12s', sfdu_block[150:162])[0]

      # quasar_id_num: 2 byte UnsignedMSB2, bytes 162-164
      self.quasar_id_num = struct.unpack('>H', sfdu_block[162:164])[0]

      # data_qual_flag: 1 byte UnsignedByte, bytes 164-165
      self.data_qual_flag = struct.unpack('>B', sfdu_block[164:165])[0]

      # freq_chan_num: 1 byte UnsignedByte, bytes 165-166
      self.freq_chan_num = struct.unpack('>B', sfdu_block[165:166])[0]

      # mode_id: 1 byte UnsignedByte, bytes 166-167
      self.mode_id = struct.unpack('>B', sfdu_block[166:167])[0]

      # modulo_flag: 1 byte UnsignedByte, bytes 167-168
      self.modulo_flag = struct.unpack('>B', sfdu_block[167:168])[0]

      # ref_freq: 8 byte IEEE754MSBDouble, bytes 168-176
      self.ref_freq = struct.unpack('>d', sfdu_block[168:176])[0]

      # modulus: 8 byte IEEE754MSBDouble, bytes 176-184
      self.modulus = struct.unpack('>d', sfdu_block[176:184])[0]

      # dod_cnt_time: 4 byte IEEE754MSBSingle, bytes 184-188
      self.dod_cnt_time = struct.unpack('>f', sfdu_block[184:188])[0]

      # dod_obs: 8 byte IEEE754MSBDouble, bytes 188-196
      self.dod_obs = struct.unpack('>d', sfdu_block[188:196])[0]

      # dor_obs: 8 byte IEEE754MSBDouble, bytes 196-204
      self.dor_obs = struct.unpack('>d', sfdu_block[196:204])[0]

      # Reserve20: 20 byte UnsignedMSB20, bytes 204-224
      self.Reserve20 = sfdu_block[204:224]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class DrvidTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 11 - Tracking CHDO - DRVID
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.drvid_type = -1
      self.drvid_pts = -1
      self.drvid = -1
      self.prn0 = -1
      self.drvid_noise = -1
      self.drvid_tol_value = -1
      self.prn0_resid_tol_value = -1
      self.reserve1 = ''
      self.drvid_tol_flag = -1
      self.prn0_resid_tol_flag = -1
      self.drvid_noise_pts = -1
      self.reserve8 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '          drvid_type = %i \n' % self.drvid_type
      out += '           drvid_pts = %i \n' % self.drvid_pts
      out += '               drvid = %f \n' % self.drvid
      out += '                prn0 = %f \n' % self.prn0
      out += '         drvid_noise = %f \n' % self.drvid_noise
      out += '     drvid_tol_value = %f \n' % self.drvid_tol_value
      out += 'prn0_resid_tol_value = %f \n' % self.prn0_resid_tol_value
      out += '            reserve1 = %s \n' % self.reserve1
      out += '      drvid_tol_flag = %i \n' % self.drvid_tol_flag
      out += ' prn0_resid_tol_flag = %i \n' % self.prn0_resid_tol_flag
      out += '     drvid_noise_pts = %i \n' % self.drvid_noise_pts
      out += '            reserve8 = %s \n' % self.reserve8
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 160-162
      self.chdo_type = struct.unpack('>H', sfdu_block[160:162])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 162-164
      self.chdo_length = struct.unpack('>H', sfdu_block[162:164])[0]

      # drvid_type: 1 byte UnsignedByte, bytes 164-165
      self.drvid_type = struct.unpack('>B', sfdu_block[164:165])[0]

      # drvid_pts: 1 byte UnsignedByte, bytes 165-166
      self.drvid_pts = struct.unpack('>B', sfdu_block[165:166])[0]

      # drvid: 8 byte IEEE754MSBDouble, bytes 166-174
      self.drvid = struct.unpack('>d', sfdu_block[166:174])[0]

      # prn0: 4 byte IEEE754MSBSingle, bytes 174-178
      self.prn0 = struct.unpack('>f', sfdu_block[174:178])[0]

      # drvid_noise: 4 byte IEEE754MSBSingle, bytes 178-182
      self.drvid_noise = struct.unpack('>f', sfdu_block[178:182])[0]

      # drvid_tol_value: 4 byte IEEE754MSBSingle, bytes 182-186
      self.drvid_tol_value = struct.unpack('>f', sfdu_block[182:186])[0]

      # prn0_resid_tol_value: 4 byte IEEE754MSBSingle, bytes 186-190
      self.prn0_resid_tol_value = struct.unpack('>f', sfdu_block[186:190])[0]

      # reserve1: 1 byte UnsignedByte, bytes 190-191
      self.reserve1 = sfdu_block[190:191]

      # drvid_tol_flag: 1 byte UnsignedByte, bytes 191-192
      self.drvid_tol_flag = struct.unpack('>B', sfdu_block[191:192])[0]

      # prn0_resid_tol_flag: 1 byte UnsignedByte, bytes 192-193
      self.prn0_resid_tol_flag = struct.unpack('>B', sfdu_block[192:193])[0]

      # drvid_noise_pts: 1 byte UnsignedByte, bytes 193-194
      self.drvid_noise_pts = struct.unpack('>B', sfdu_block[193:194])[0]

      # reserve8: 8 byte UnsignedMSB8, bytes 194-202
      self.reserve8 = sfdu_block[194:202]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class SmoothedNoiseTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 12 - Tracking CHDO - Smoothed Noise
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.n01sec_sm_noise = -1
      self.n1sec_sm_noise = -1
      self.n10sec_sm_noise = -1
      self.n100sec_sm_noise = -1
      self.n200sec_sm_noise = -1
      self.n600sec_sm_noise = -1
      self.int_time = -1
      self.percent_data_used = -1
      self.new_01sec = -1
      self.new_1sec = -1
      self.new_10sec = -1
      self.new_100sec = -1
      self.new_200sec = -1
      self.new_600sec = -1
      self.reserve8 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '     n01sec_sm_noise = %f \n' % self.n01sec_sm_noise
      out += '      n1sec_sm_noise = %f \n' % self.n1sec_sm_noise
      out += '     n10sec_sm_noise = %f \n' % self.n10sec_sm_noise
      out += '    n100sec_sm_noise = %f \n' % self.n100sec_sm_noise
      out += '    n200sec_sm_noise = %f \n' % self.n200sec_sm_noise
      out += '    n600sec_sm_noise = %f \n' % self.n600sec_sm_noise
      out += '            int_time = %i \n' % self.int_time
      out += '   percent_data_used = %f \n' % self.percent_data_used
      out += '           new_01sec = %i \n' % self.new_01sec
      out += '            new_1sec = %i \n' % self.new_1sec
      out += '           new_10sec = %i \n' % self.new_10sec
      out += '          new_100sec = %i \n' % self.new_100sec
      out += '          new_200sec = %i \n' % self.new_200sec
      out += '          new_600sec = %i \n' % self.new_600sec
      out += '            reserve8 = %s \n' % self.reserve8
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 134-136
      self.chdo_type = struct.unpack('>H', sfdu_block[134:136])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 136-138
      self.chdo_length = struct.unpack('>H', sfdu_block[136:138])[0]

      # 01sec_sm_noise: 4 byte IEEE754MSBSingle, bytes 138-142
      self.n01sec_sm_noise = struct.unpack('>f', sfdu_block[138:142])[0]

      # 1sec_sm_noise: 4 byte IEEE754MSBSingle, bytes 142-146
      self.n1sec_sm_noise = struct.unpack('>f', sfdu_block[142:146])[0]

      # 10sec_sm_noise: 4 byte IEEE754MSBSingle, bytes 146-150
      self.n10sec_sm_noise = struct.unpack('>f', sfdu_block[146:150])[0]

      # 100sec_sm_noise: 4 byte IEEE754MSBSingle, bytes 150-154
      self.n100sec_sm_noise = struct.unpack('>f', sfdu_block[150:154])[0]

      # 200sec_sm_noise: 4 byte IEEE754MSBSingle, bytes 154-158
      self.n200sec_sm_noise = struct.unpack('>f', sfdu_block[154:158])[0]

      # 600sec_sm_noise: 4 byte IEEE754MSBSingle, bytes 158-162
      self.n600sec_sm_noise = struct.unpack('>f', sfdu_block[158:162])[0]

      # int_time: 4 byte UnsignedMSB4, bytes 162-166
      self.int_time = struct.unpack('>I', sfdu_block[162:166])[0]

      # percent_data_used: 4 byte IEEE754MSBSingle, bytes 166-170
      self.percent_data_used = struct.unpack('>f', sfdu_block[166:170])[0]

      # new_01sec: 1 byte UnsignedByte, bytes 170-171
      self.new_01sec = struct.unpack('>B', sfdu_block[170:171])[0]

      # new_1sec: 1 byte UnsignedByte, bytes 171-172
      self.new_1sec = struct.unpack('>B', sfdu_block[171:172])[0]

      # new_10sec: 1 byte UnsignedByte, bytes 172-173
      self.new_10sec = struct.unpack('>B', sfdu_block[172:173])[0]

      # new_100sec: 1 byte UnsignedByte, bytes 173-174
      self.new_100sec = struct.unpack('>B', sfdu_block[173:174])[0]

      # new_200sec: 1 byte UnsignedByte, bytes 174-175
      self.new_200sec = struct.unpack('>B', sfdu_block[174:175])[0]

      # new_600sec: 1 byte UnsignedByte, bytes 175-176
      self.new_600sec = struct.unpack('>B', sfdu_block[175:176])[0]

      # reserve8: 8 byte UnsignedMSB8, bytes 176-184
      self.reserve8 = sfdu_block[176:184]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class AllanDeviationTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 13 - Tracking CHDO - Allan Deviation
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.n01sec_allan_dev = -1
      self.n1sec_allan_dev = -1
      self.n10sec_allan_dev = -1
      self.n100sec_allan_dev = -1
      self.n1000sec_allan_dev = -1
      self.int_time = -1
      self.percent_data_used = -1
      self.rpt_cause = -1
      self.new_01sec = -1
      self.new_1sec = -1
      self.new_10sec = -1
      self.new_100sec = -1
      self.new_1000sec = -1
      self.reserve8 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '    n01sec_allan_dev = %f \n' % self.n01sec_allan_dev
      out += '     n1sec_allan_dev = %f \n' % self.n1sec_allan_dev
      out += '    n10sec_allan_dev = %f \n' % self.n10sec_allan_dev
      out += '   n100sec_allan_dev = %f \n' % self.n100sec_allan_dev
      out += '  n1000sec_allan_dev = %f \n' % self.n1000sec_allan_dev
      out += '            int_time = %i \n' % self.int_time
      out += '   percent_data_used = %f \n' % self.percent_data_used
      out += '           rpt_cause = %i \n' % self.rpt_cause
      out += '           new_01sec = %i \n' % self.new_01sec
      out += '            new_1sec = %i \n' % self.new_1sec
      out += '           new_10sec = %i \n' % self.new_10sec
      out += '          new_100sec = %i \n' % self.new_100sec
      out += '         new_1000sec = %i \n' % self.new_1000sec
      out += '            reserve8 = %s \n' % self.reserve8
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 134-136
      self.chdo_type = struct.unpack('>H', sfdu_block[134:136])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 136-138
      self.chdo_length = struct.unpack('>H', sfdu_block[136:138])[0]

      # 01sec_allan_dev: 4 byte IEEE754MSBSingle, bytes 138-142
      self.n01sec_allan_dev = struct.unpack('>f', sfdu_block[138:142])[0]

      # 1sec_allan_dev: 4 byte IEEE754MSBSingle, bytes 142-146
      self.n1sec_allan_dev = struct.unpack('>f', sfdu_block[142:146])[0]

      # 10sec_allan_dev: 4 byte IEEE754MSBSingle, bytes 146-150
      self.n10sec_allan_dev = struct.unpack('>f', sfdu_block[146:150])[0]

      # 100sec_allan_dev: 4 byte IEEE754MSBSingle, bytes 150-154
      self.n100sec_allan_dev = struct.unpack('>f', sfdu_block[150:154])[0]

      # 1000sec_allan_dev: 4 byte IEEE754MSBSingle, bytes 154-158
      self.n1000sec_allan_dev = struct.unpack('>f', sfdu_block[154:158])[0]

      # int_time: 4 byte UnsignedMSB4, bytes 158-162
      self.int_time = struct.unpack('>I', sfdu_block[158:162])[0]

      # percent_data_used: 4 byte IEEE754MSBSingle, bytes 162-166
      self.percent_data_used = struct.unpack('>f', sfdu_block[162:166])[0]

      # rpt_cause: 1 byte UnsignedByte, bytes 166-167
      self.rpt_cause = struct.unpack('>B', sfdu_block[166:167])[0]

      # new_01sec: 1 byte UnsignedByte, bytes 167-168
      self.new_01sec = struct.unpack('>B', sfdu_block[167:168])[0]

      # new_1sec: 1 byte UnsignedByte, bytes 168-169
      self.new_1sec = struct.unpack('>B', sfdu_block[168:169])[0]

      # new_10sec: 1 byte UnsignedByte, bytes 169-170
      self.new_10sec = struct.unpack('>B', sfdu_block[169:170])[0]

      # new_100sec: 1 byte UnsignedByte, bytes 170-171
      self.new_100sec = struct.unpack('>B', sfdu_block[170:171])[0]

      # new_1000sec: 1 byte UnsignedByte, bytes 171-172
      self.new_1000sec = struct.unpack('>B', sfdu_block[171:172])[0]

      # reserve8: 8 byte UnsignedMSB8, bytes 172-180
      self.reserve8 = sfdu_block[172:180]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class PnRangeTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 14 - Tracking CHDO - PN Range
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.ul_stn_cal = -1
      self.dl_stn_cal = -1
      self.meas_rng = -1
      self.rng_obs_dl = -1
      self.figure_merit = -1
      self.drvid = -1
      self.rtlt = -1
      self.prn0 = -1
      self.transmit_pwr = -1
      self.invert = -1
      self.correl_type = -1
      self.chip_rate = -1
      self.len_subcode1 = -1
      self.len_subcode2 = -1
      self.len_subcode3 = -1
      self.len_subcode4 = -1
      self.len_subcode5 = -1
      self.len_subcode6 = -1
      self.op_subcode1 = -1
      self.op_subcode2 = -1
      self.op_subcode3 = -1
      self.op_subcode4 = -1
      self.op_subcode5 = -1
      self.def_subcode1 = -1
      self.def_subcode2 = -1
      self.def_subcode3 = -1
      self.def_subcode4 = -1
      self.def_subcode5 = -1
      self.def_subcode6 = -1
      self.pn_code_length = -1
      self.transmit_inphs_time = -1
      self.rcv_inphs_time = -1
      self.carr_sup_rng_modul = -1
      self.exc_scalar_num = -1
      self.exc_scalar_den = -1
      self.rng_cycle_time = -1
      self.rng_modulo = -1
      self.rng_type = -1
      self.fabricated_ul_flag = -1
      self.rng_noise = -1
      self.rng_dl_prefit_resid = -1
      self.rng_dl_prefit_resid_vld_flag = -1
      self.clock_waveform = -1
      self.rng_resid_tol_value = -1
      self.drvid_tol_value = -1
      self.prn0_resid_tol_value = -1
      self.rng_sigma_tol_value = -1
      self.fom_tol_value = -1
      self.rng_resid_tol_flag = -1
      self.drvid_tol_flag = -1
      self.prn0_resid_tol_flag = -1
      self.rng_sigma_tol_flag = -1
      self.rng_vld_flag = -1
      self.rng_config_flag = -1
      self.stn_cal_corr_flag = -1
      self.op_subcode6 = -1
      self.ccsds_k = -1
      self.ccsds_l = -1
      self.Reserve4 = ''

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '          ul_stn_cal = %f \n' % self.ul_stn_cal
      out += '          dl_stn_cal = %f \n' % self.dl_stn_cal
      out += '            meas_rng = %f \n' % self.meas_rng
      out += '          rng_obs_dl = %f \n' % self.rng_obs_dl
      out += '        figure_merit = %f \n' % self.figure_merit
      out += '               drvid = %f \n' % self.drvid
      out += '                rtlt = %f \n' % self.rtlt
      out += '                prn0 = %f \n' % self.prn0
      out += '        transmit_pwr = %f \n' % self.transmit_pwr
      out += '              invert = %i \n' % self.invert
      out += '         correl_type = %i \n' % self.correl_type
      out += '           chip_rate = %i \n' % self.chip_rate
      out += '        len_subcode1 = %i \n' % self.len_subcode1
      out += '        len_subcode2 = %i \n' % self.len_subcode2
      out += '        len_subcode3 = %i \n' % self.len_subcode3
      out += '        len_subcode4 = %i \n' % self.len_subcode4
      out += '        len_subcode5 = %i \n' % self.len_subcode5
      out += '        len_subcode6 = %i \n' % self.len_subcode6
      out += '         op_subcode1 = %i \n' % self.op_subcode1
      out += '         op_subcode2 = %i \n' % self.op_subcode2
      out += '         op_subcode3 = %i \n' % self.op_subcode3
      out += '         op_subcode4 = %i \n' % self.op_subcode4
      out += '         op_subcode5 = %i \n' % self.op_subcode5
      out += '        def_subcode1 = %i \n' % self.def_subcode1
      out += '        def_subcode2 = %i \n' % self.def_subcode2
      out += '        def_subcode3 = %i \n' % self.def_subcode3
      out += '        def_subcode4 = %i \n' % self.def_subcode4
      out += '        def_subcode5 = %i \n' % self.def_subcode5
      out += '        def_subcode6 = %i \n' % self.def_subcode6
      out += '      pn_code_length = %i \n' % self.pn_code_length
      out += ' transmit_inphs_time = %f \n' % self.transmit_inphs_time
      out += '      rcv_inphs_time = %f \n' % self.rcv_inphs_time
      out += ' carr_sup_rng_modul = %f \n' % self.carr_sup_rng_modul
      out += '      exc_scalar_num = %i \n' % self.exc_scalar_num
      out += '      exc_scalar_den = %i \n' % self.exc_scalar_den
      out += '      rng_cycle_time = %f \n' % self.rng_cycle_time
      out += '          rng_modulo = %i \n' % self.rng_modulo
      out += '            rng_type = %i \n' % self.rng_type
      out += '  fabricated_ul_flag = %i \n' % self.fabricated_ul_flag
      out += '           rng_noise = %f \n' % self.rng_noise
      out += ' rng_dl_prefit_resid = %f \n' % self.rng_dl_prefit_resid
      out += 'rng_dl_prefit_resid_vld_flag = %i \n' % self.rng_dl_prefit_resid_vld_flag
      out += '      clock_waveform = %i \n' % self.clock_waveform
      out += ' rng_resid_tol_value = %f \n' % self.rng_resid_tol_value
      out += '     drvid_tol_value = %f \n' % self.drvid_tol_value
      out += 'prn0_resid_tol_value = %f \n' % self.prn0_resid_tol_value
      out += ' rng_sigma_tol_value = %f \n' % self.rng_sigma_tol_value
      out += '       fom_tol_value = %f \n' % self.fom_tol_value
      out += '  rng_resid_tol_flag = %i \n' % self.rng_resid_tol_flag
      out += '      drvid_tol_flag = %i \n' % self.drvid_tol_flag
      out += ' prn0_resid_tol_flag = %i \n' % self.prn0_resid_tol_flag
      out += '  rng_sigma_tol_flag = %i \n' % self.rng_sigma_tol_flag
      out += '        rng_vld_flag = %i \n' % self.rng_vld_flag
      out += '     rng_config_flag = %i \n' % self.rng_config_flag
      out += '   stn_cal_corr_flag = %i \n' % self.stn_cal_corr_flag
      out += '         op_subcode6 = %i \n' % self.op_subcode6
      out += '             ccsds_k = %i \n' % self.ccsds_k
      out += '             ccsds_l = %i \n' % self.ccsds_l
      out += '            Reserve4 = %s \n' % self.Reserve4
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 160-162
      self.chdo_type = struct.unpack('>H', sfdu_block[160:162])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 162-164
      self.chdo_length = struct.unpack('>H', sfdu_block[162:164])[0]

      # ul_stn_cal: 8 byte IEEE754MSBDouble, bytes 164-172
      self.ul_stn_cal = struct.unpack('>d', sfdu_block[164:172])[0]

      # dl_stn_cal: 8 byte IEEE754MSBDouble, bytes 172-180
      self.dl_stn_cal = struct.unpack('>d', sfdu_block[172:180])[0]

      # meas_rng: 8 byte IEEE754MSBDouble, bytes 180-188
      self.meas_rng = struct.unpack('>d', sfdu_block[180:188])[0]

      # rng_obs_dl: 8 byte IEEE754MSBDouble, bytes 188-196
      self.rng_obs_dl = struct.unpack('>d', sfdu_block[188:196])[0]

      # figure_merit: 4 byte IEEE754MSBSingle, bytes 196-200
      self.figure_merit = struct.unpack('>f', sfdu_block[196:200])[0]

      # drvid: 8 byte IEEE754MSBDouble, bytes 200-208
      self.drvid = struct.unpack('>d', sfdu_block[200:208])[0]

      # rtlt: 4 byte IEEE754MSBSingle, bytes 208-212
      self.rtlt = struct.unpack('>f', sfdu_block[208:212])[0]

      # prn0: 4 byte IEEE754MSBSingle, bytes 212-216
      self.prn0 = struct.unpack('>f', sfdu_block[212:216])[0]

      # transmit_pwr: 4 byte IEEE754MSBSingle, bytes 216-220
      self.transmit_pwr = struct.unpack('>f', sfdu_block[216:220])[0]

      # invert: 1 byte UnsignedByte, bytes 220-221
      self.invert = struct.unpack('>B', sfdu_block[220:221])[0]

      # correl_type: 1 byte UnsignedByte, bytes 221-222
      self.correl_type = struct.unpack('>B', sfdu_block[221:222])[0]

      # chip_rate: 1 byte UnsignedByte, bytes 222-223
      self.chip_rate = struct.unpack('>B', sfdu_block[222:223])[0]

      # len_subcode1: 1 byte UnsignedByte, bytes 223-224
      self.len_subcode1 = struct.unpack('>B', sfdu_block[223:224])[0]

      # len_subcode2: 1 byte UnsignedByte, bytes 224-225
      self.len_subcode2 = struct.unpack('>B', sfdu_block[224:225])[0]

      # len_subcode3: 1 byte UnsignedByte, bytes 225-226
      self.len_subcode3 = struct.unpack('>B', sfdu_block[225:226])[0]

      # len_subcode4: 1 byte UnsignedByte, bytes 226-227
      self.len_subcode4 = struct.unpack('>B', sfdu_block[226:227])[0]

      # len_subcode5: 1 byte UnsignedByte, bytes 227-228
      self.len_subcode5 = struct.unpack('>B', sfdu_block[227:228])[0]

      # len_subcode6: 1 byte UnsignedByte, bytes 228-229
      self.len_subcode6 = struct.unpack('>B', sfdu_block[228:229])[0]

      # op_subcode1: 1 byte UnsignedByte, bytes 229-230
      self.op_subcode1 = struct.unpack('>B', sfdu_block[229:230])[0]

      # op_subcode2: 1 byte UnsignedByte, bytes 230-231
      self.op_subcode2 = struct.unpack('>B', sfdu_block[230:231])[0]

      # op_subcode3: 1 byte UnsignedByte, bytes 231-232
      self.op_subcode3 = struct.unpack('>B', sfdu_block[231:232])[0]

      # op_subcode4: 1 byte UnsignedByte, bytes 232-233
      self.op_subcode4 = struct.unpack('>B', sfdu_block[232:233])[0]

      # op_subcode5: 1 byte UnsignedByte, bytes 233-234
      self.op_subcode5 = struct.unpack('>B', sfdu_block[233:234])[0]

      # def_subcode1: 8 byte UnsignedMSB8, bytes 234-242
      self.def_subcode1 = struct.unpack('>Q', sfdu_block[234:242])[0]

      # def_subcode2: 8 byte UnsignedMSB8, bytes 242-250
      self.def_subcode2 = struct.unpack('>Q', sfdu_block[242:250])[0]

      # def_subcode3: 8 byte UnsignedMSB8, bytes 250-258
      self.def_subcode3 = struct.unpack('>Q', sfdu_block[250:258])[0]

      # def_subcode4: 8 byte UnsignedMSB8, bytes 258-266
      self.def_subcode4 = struct.unpack('>Q', sfdu_block[258:266])[0]

      # def_subcode5: 8 byte UnsignedMSB8, bytes 266-274
      self.def_subcode5 = struct.unpack('>Q', sfdu_block[266:274])[0]

      # def_subcode6: 8 byte UnsignedMSB8, bytes 274-282
      self.def_subcode6 = struct.unpack('>Q', sfdu_block[274:282])[0]

      # pn_code_length: 4 byte UnsignedMSB4, bytes 282-286
      self.pn_code_length = struct.unpack('>I', sfdu_block[282:286])[0]

      # transmit_inphs_time: 4 byte IEEE754MSBSingle, bytes 286-290
      self.transmit_inphs_time = struct.unpack('>f', sfdu_block[286:290])[0]

      # rcv_inphs_time: 4 byte IEEE754MSBSingle, bytes 290-294
      self.rcv_inphs_time = struct.unpack('>f', sfdu_block[290:294])[0]

      # carr_sup_rng_modul: 4 byte IEEE754MSBSingle, bytes 294-298
      self.carr_sup_rng_modul = struct.unpack('>f', sfdu_block[294:298])[0]

      # exc_scalar_num: 4 byte UnsignedMSB4, bytes 298-302
      self.exc_scalar_num = struct.unpack('>I', sfdu_block[298:302])[0]

      # exc_scalar_den: 4 byte UnsignedMSB4, bytes 302-306
      self.exc_scalar_den = struct.unpack('>I', sfdu_block[302:306])[0]

      # rng_cycle_time: 8 byte IEEE754MSBDouble, bytes 306-314
      self.rng_cycle_time = struct.unpack('>d', sfdu_block[306:314])[0]

      # rng_modulo: 4 byte UnsignedMSB4, bytes 314-318
      self.rng_modulo = struct.unpack('>I', sfdu_block[314:318])[0]

      # rng_type: 1 byte UnsignedByte, bytes 318-319
      self.rng_type = struct.unpack('>B', sfdu_block[318:319])[0]

      # fabricated_ul_flag: 1 byte UnsignedByte, bytes 319-320
      self.fabricated_ul_flag = struct.unpack('>B', sfdu_block[319:320])[0]

      # rng_noise: 4 byte IEEE754MSBSingle, bytes 320-324
      self.rng_noise = struct.unpack('>f', sfdu_block[320:324])[0]

      # rng_dl_prefit_resid: 8 byte IEEE754MSBDouble, bytes 324-332
      self.rng_dl_prefit_resid = struct.unpack('>d', sfdu_block[324:332])[0]

      # rng_dl_prefit_resid_vld_flag: 1 byte UnsignedByte, bytes 332-333
      self.rng_dl_prefit_resid_vld_flag = struct.unpack('>B', sfdu_block[332:333])[0]

      # clock_waveform: 1 byte UnsignedByte, bytes 333-334
      self.clock_waveform = struct.unpack('>B', sfdu_block[333:334])[0]

      # rng_resid_tol_value: 4 byte IEEE754MSBSingle, bytes 334-338
      self.rng_resid_tol_value = struct.unpack('>f', sfdu_block[334:338])[0]

      # drvid_tol_value: 4 byte IEEE754MSBSingle, bytes 338-342
      self.drvid_tol_value = struct.unpack('>f', sfdu_block[338:342])[0]

      # prn0_resid_tol_value: 4 byte IEEE754MSBSingle, bytes 342-346
      self.prn0_resid_tol_value = struct.unpack('>f', sfdu_block[342:346])[0]

      # rng_sigma_tol_value: 4 byte IEEE754MSBSingle, bytes 346-350
      self.rng_sigma_tol_value = struct.unpack('>f', sfdu_block[346:350])[0]

      # fom_tol_value: 4 byte IEEE754MSBSingle, bytes 350-354
      self.fom_tol_value = struct.unpack('>f', sfdu_block[350:354])[0]

      # rng_resid_tol_flag: 1 byte UnsignedByte, bytes 354-355
      self.rng_resid_tol_flag = struct.unpack('>B', sfdu_block[354:355])[0]

      # drvid_tol_flag: 1 byte UnsignedByte, bytes 355-356
      self.drvid_tol_flag = struct.unpack('>B', sfdu_block[355:356])[0]

      # prn0_resid_tol_flag: 1 byte UnsignedByte, bytes 356-357
      self.prn0_resid_tol_flag = struct.unpack('>B', sfdu_block[356:357])[0]

      # rng_sigma_tol_flag: 1 byte UnsignedByte, bytes 357-358
      self.rng_sigma_tol_flag = struct.unpack('>B', sfdu_block[357:358])[0]

      # rng_vld_flag: 1 byte UnsignedByte, bytes 358-359
      self.rng_vld_flag = struct.unpack('>B', sfdu_block[358:359])[0]

      # rng_config_flag: 1 byte UnsignedByte, bytes 359-360
      self.rng_config_flag = struct.unpack('>B', sfdu_block[359:360])[0]

      # stn_cal_corr_flag: 1 byte UnsignedByte, bytes 360-361
      self.stn_cal_corr_flag = struct.unpack('>B', sfdu_block[360:361])[0]

      # op_subcode6: 1 byte UnsignedByte, bytes 361-362
      self.op_subcode6 = struct.unpack('>B', sfdu_block[361:362])[0]

      # ccsds_k: 1 byte UnsignedByte, bytes 362-363
      self.ccsds_k = struct.unpack('>B', sfdu_block[362:363])[0]

      # ccsds_l: 1 byte UnsignedByte, bytes 363-364
      self.ccsds_l = struct.unpack('>B', sfdu_block[363:364])[0]

      # Reserve4: 4 byte UnsignedMSB4, bytes 364-368
      self.Reserve4 = sfdu_block[364:368]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class ToneRangeTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 15 - Tracking CHDO - Tone Range
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.source_type = -1
      self.mjr_tone_freq = -1
      self.mnr_tone_freq = -1
      self.rng_prefit_resid_vld_flag = -1
      self.meas_rng = -1
      self.rng_obs = -1
      self.stn_cal = -1
      self.carr_pwr = -1
      self.rng_prefit_resid = -1
      self.ul_freq = -1
      self.time_tag_corr_flag = -1
      self.type_time_corr_flag = -1

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '         source_type = %i \n' % self.source_type
      out += '       mjr_tone_freq = %i \n' % self.mjr_tone_freq
      out += '       mnr_tone_freq = %i \n' % self.mnr_tone_freq
      out += 'rng_prefit_resid_vld_flag = %i \n' % self.rng_prefit_resid_vld_flag
      out += '            meas_rng = %f \n' % self.meas_rng
      out += '             rng_obs = %f \n' % self.rng_obs
      out += '             stn_cal = %f \n' % self.stn_cal
      out += '            carr_pwr = %f \n' % self.carr_pwr
      out += '    rng_prefit_resid = %f \n' % self.rng_prefit_resid
      out += '             ul_freq = %f \n' % self.ul_freq
      out += '  time_tag_corr_flag = %i \n' % self.time_tag_corr_flag
      out += ' type_time_corr_flag = %i \n' % self.type_time_corr_flag
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 160-162
      self.chdo_type = struct.unpack('>H', sfdu_block[160:162])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 162-164
      self.chdo_length = struct.unpack('>H', sfdu_block[162:164])[0]

      # source_type: 1 byte UnsignedByte, bytes 164-165
      self.source_type = struct.unpack('>B', sfdu_block[164:165])[0]

      # mjr_tone_freq: 1 byte UnsignedByte, bytes 165-166
      self.mjr_tone_freq = struct.unpack('>B', sfdu_block[165:166])[0]

      # mnr_tone_freq: 1 byte UnsignedByte, bytes 166-167
      self.mnr_tone_freq = struct.unpack('>B', sfdu_block[166:167])[0]

      # rng_prefit_resid_vld_flag: 1 byte UnsignedByte, bytes 167-168
      self.rng_prefit_resid_vld_flag = struct.unpack('>B', sfdu_block[167:168])[0]

      # meas_rng: 8 byte IEEE754MSBDouble, bytes 168-176
      self.meas_rng = struct.unpack('>d', sfdu_block[168:176])[0]

      # rng_obs: 8 byte IEEE754MSBDouble, bytes 176-184
      self.rng_obs = struct.unpack('>d', sfdu_block[176:184])[0]

      # stn_cal: 8 byte IEEE754MSBDouble, bytes 184-192
      self.stn_cal = struct.unpack('>d', sfdu_block[184:192])[0]

      # carr_pwr: 4 byte IEEE754MSBSingle, bytes 192-196
      self.carr_pwr = struct.unpack('>f', sfdu_block[192:196])[0]

      # rng_prefit_resid: 8 byte IEEE754MSBDouble, bytes 196-204
      self.rng_prefit_resid = struct.unpack('>d', sfdu_block[196:204])[0]

      # ul_freq: 8 byte IEEE754MSBDouble, bytes 204-212
      self.ul_freq = struct.unpack('>d', sfdu_block[204:212])[0]

      # time_tag_corr_flag: 1 byte UnsignedByte, bytes 212-213
      self.time_tag_corr_flag = struct.unpack('>B', sfdu_block[212:213])[0]

      # type_time_corr_flag: 1 byte UnsignedByte, bytes 213-214
      self.type_time_corr_flag = struct.unpack('>B', sfdu_block[213:214])[0]

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class CarrierFrequencyObservableTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 16 - Tracking CHDO - Carrier Frequency Observable
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.ref_rcv_type = -1
      self.fabricated_ul_flag = -1
      self.carr_prefit_resid_tol_value = -1
      self.reserve2 = ''
      self.dop_noise = -1
      self.delta_ff = -1
      self.rcv_sig_lvl = -1
      self.num_obs = -1
      self.obs_cnt_time = -1
      self.rcv_carr_obs = []
      self.carr_prefit_resid = []
      self.carr_prefit_resid_vld_flag = []
      self.carr_prefit_resid_tol_flag = []
      self.reserve4 = []
      self.reserve8 = []

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '        ref_rcv_type = %i \n' % self.ref_rcv_type
      out += '  fabricated_ul_flag = %i \n' % self.fabricated_ul_flag
      out += 'carr_prefit_resid_tol_value = %f \n' % self.carr_prefit_resid_tol_value
      out += '            reserve2 = %s \n' % self.reserve2
      out += '           dop_noise = %f \n' % self.dop_noise
      out += '            delta_ff = %f \n' % self.delta_ff
      out += '         rcv_sig_lvl = %f \n' % self.rcv_sig_lvl
      out += '             num_obs = %i \n' % self.num_obs
      out += '        obs_cnt_time = %f \n' % self.obs_cnt_time
      out += '        rcv_carr_obs = %s \n' % str(self.rcv_carr_obs)
      out += '   carr_prefit_resid = %s \n' % str(self.carr_prefit_resid)
      out += 'carr_prefit_resid_vld_flag = %s \n' % str(self.carr_prefit_resid_vld_flag)
      out += 'carr_prefit_resid_tol_flag = %s \n' % str(self.carr_prefit_resid_tol_flag)
      out += '            reserve4 = %s \n' % str(self.reserve4)
      out += '            reserve8 = %s \n' % str(self.reserve8)
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 160-162
      self.chdo_type = struct.unpack('>H', sfdu_block[160:162])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 162-164
      self.chdo_length = struct.unpack('>H', sfdu_block[162:164])[0]

      # ref_rcv_type: 1 byte UnsignedByte, bytes 164-165
      self.ref_rcv_type = struct.unpack('>B', sfdu_block[164:165])[0]

      # fabricated_ul_flag: 1 byte UnsignedByte, bytes 165-166
      self.fabricated_ul_flag = struct.unpack('>B', sfdu_block[165:166])[0]

      # carr_prefit_resid_tol_value: 4 byte IEEE754MSBSingle, bytes 166-170
      self.carr_prefit_resid_tol_value = struct.unpack('>f', sfdu_block[166:170])[0]

      # reserve2: 2 byte UnsignedMSB2, bytes 170-172
      self.reserve2 = sfdu_block[170:172]

      # dop_noise: 4 byte IEEE754MSBSingle, bytes 172-176
      self.dop_noise = struct.unpack('>f', sfdu_block[172:176])[0]

      # delta_ff: 8 byte IEEE754MSBDouble, bytes 176-184
      self.delta_ff = struct.unpack('>d', sfdu_block[176:184])[0]

      # rcv_sig_lvl: 4 byte IEEE754MSBSingle, bytes 184-188
      self.rcv_sig_lvl = struct.unpack('>f', sfdu_block[184:188])[0]

      # num_obs: 2 byte UnsignedMSB2, bytes 188-190
      self.num_obs = struct.unpack('>H', sfdu_block[188:190])[0]

      # obs_cnt_time: 4 byte IEEE754MSBSingle, bytes 190-194
      self.obs_cnt_time = struct.unpack('>f', sfdu_block[190:194])[0]

      # --- LOOP THROUGH OBSERVATIONS ---
      for i in range( self.num_obs ):

         # rcv_carr_obs: IEEE754MSBDouble
         self.rcv_carr_obs.append( struct.unpack('>d', sfdu_block[194+i*18:194+i*18+8])[0] )

         # carr_prefit_resid: IEEE754MSBSingle
         self.carr_prefit_resid.append( struct.unpack('>f', sfdu_block[202+i*18:202+i*18+4])[0] )

         # carr_prefit_resid_vld_flag: UnsignedByte
         self.carr_prefit_resid_vld_flag.append( struct.unpack('>B', sfdu_block[206+i*18:206+i*18+1])[0] )

         # carr_prefit_resid_tol_flag: UnsignedByte
         self.carr_prefit_resid_tol_flag.append( struct.unpack('>B', sfdu_block[207+i*18:207+i*18+1])[0] )

         # reserve4: UnsignedMSB4
         self.reserve4.append( sfdu_block[208+i*18:208+i*18+4] )

         # reserve8: UnsignedMSB8
         self.reserve8.append( sfdu_block[212+i*18:212+i*18+8] )

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
class TotalCountPhaseObservableTrackingCHDO:
   """
      Read/decode an SFDU Tracking CHDO for TRK 2-34

      Type 17 - Tracking CHDO - Total Count Phase Observable
   """
   def __init__(self):
      """ class constructor """

      # Initialize variables in the SFDU Label
      self.binarystring = ''
      self.chdo_type = -1
      self.chdo_length = -1
      self.ref_rcv_type = -1
      self.fabricated_ul_flag = -1
      self.total_cnt_phs_prefit_resid_tol_value = -1
      self.reserve2 = ''
      self.dop_noise = -1
      self.delta_ff = -1
      self.rcv_sig_lvl = -1
      self.num_obs = -1
      self.obs_cnt_time = -1
      self.total_cnt_phs_st_year = -1
      self.total_cnt_phs_st_doy = -1
      self.total_cnt_phs_st_sec = -1
      self.total_cnt_phs_obs_hi = []
      self.total_cnt_phs_obs_lo = []
      self.total_cnt_phs_obs_frac = []
      self.total_cnt_phs_prefit_resid = []
      self.total_cnt_phs_prefit_resid_vld_flag = []
      self.total_cnt_phs_prefit_resid_tol_flag = []
      self.reserve4 = []
      self.reserve8 = []

   def __str__(self):
      """ print string """
      out  = ''
      out += '           chdo_type = %i \n' % self.chdo_type
      out += '         chdo_length = %i \n' % self.chdo_length
      out += '        ref_rcv_type = %i \n' % self.ref_rcv_type
      out += '  fabricated_ul_flag = %i \n' % self.fabricated_ul_flag
      out += 'total_cnt_phs_prefit_resid_tol_value = %f \n' % self.total_cnt_phs_prefit_resid_tol_value
      out += '            reserve2 = %s \n' % self.reserve2
      out += '           dop_noise = %f \n' % self.dop_noise
      out += '            delta_ff = %f \n' % self.delta_ff
      out += '         rcv_sig_lvl = %f \n' % self.rcv_sig_lvl
      out += '             num_obs = %i \n' % self.num_obs
      out += '        obs_cnt_time = %f \n' % self.obs_cnt_time
      out += 'total_cnt_phs_st_year = %i \n' % self.total_cnt_phs_st_year
      out += 'total_cnt_phs_st_doy = %i \n' % self.total_cnt_phs_st_doy
      out += 'total_cnt_phs_st_sec = %f \n' % self.total_cnt_phs_st_sec
      out += 'total_cnt_phs_obs_hi = %s \n' % str(self.total_cnt_phs_obs_hi)
      out += 'total_cnt_phs_obs_lo = %s \n' % str(self.total_cnt_phs_obs_lo)
      out += 'total_cnt_phs_obs_frac = %s \n' % str(self.total_cnt_phs_obs_frac)
      out += 'total_cnt_phs_prefit_resid = %s \n' % str(self.total_cnt_phs_prefit_resid)
      out += 'total_cnt_phs_prefit_resid_vld_flag = %s \n' % str(self.total_cnt_phs_prefit_resid_vld_flag)
      out += 'total_cnt_phs_prefit_resid_tol_flag = %s \n' % str(self.total_cnt_phs_prefit_resid_tol_flag)
      out += '            reserve4 = %s \n' % str(self.reserve4)
      out += '            reserve8 = %s \n' % str(self.reserve8)
      return out

   def decode(self, sfdu_block):
      """ decode a binary string into the attributes """

      # chdo_type: 2 byte UnsignedMSB2, bytes 160-162
      self.chdo_type = struct.unpack('>H', sfdu_block[160:162])[0]

      # chdo_length: 2 byte UnsignedMSB2, bytes 162-164
      self.chdo_length = struct.unpack('>H', sfdu_block[162:164])[0]

      # ref_rcv_type: 1 byte UnsignedByte, bytes 164-165
      self.ref_rcv_type = struct.unpack('>B', sfdu_block[164:165])[0]

      # fabricated_ul_flag: 1 byte UnsignedByte, bytes 165-166
      self.fabricated_ul_flag = struct.unpack('>B', sfdu_block[165:166])[0]

      # total_cnt_phs_prefit_resid_tol_value: 4 byte IEEE754MSBSingle, bytes 166-170
      self.total_cnt_phs_prefit_resid_tol_value = struct.unpack('>f', sfdu_block[166:170])[0]

      # reserve2: 2 byte UnsignedMSB2, bytes 170-172
      self.reserve2 = sfdu_block[170:172]

      # dop_noise: 4 byte IEEE754MSBSingle, bytes 172-176
      self.dop_noise = struct.unpack('>f', sfdu_block[172:176])[0]

      # delta_ff: 8 byte IEEE754MSBDouble, bytes 176-184
      self.delta_ff = struct.unpack('>d', sfdu_block[176:184])[0]

      # rcv_sig_lvl: 4 byte IEEE754MSBSingle, bytes 184-188
      self.rcv_sig_lvl = struct.unpack('>f', sfdu_block[184:188])[0]

      # num_obs: 2 byte UnsignedMSB2, bytes 188-190
      self.num_obs = struct.unpack('>H', sfdu_block[188:190])[0]

      # obs_cnt_time: 4 byte IEEE754MSBSingle, bytes 190-194
      self.obs_cnt_time = struct.unpack('>f', sfdu_block[190:194])[0]

      # total_cnt_phs_st_year: 2 byte UnsignedMSB2, bytes 194-196
      self.total_cnt_phs_st_year = struct.unpack('>H', sfdu_block[194:196])[0]

      # total_cnt_phs_st_doy: 2 byte UnsignedMSB2, bytes 196-198
      self.total_cnt_phs_st_doy = struct.unpack('>H', sfdu_block[196:198])[0]

      # total_cnt_phs_st_sec: 8 byte IEEE754MSBDouble, bytes 198-206
      self.total_cnt_phs_st_sec = struct.unpack('>d', sfdu_block[198:206])[0]

      # --- LOOP THROUGH OBSERVATIONS ---
      for i in range( self.num_obs ):

         # total_cnt_phs_obs_hi: UnsignedMSB4
         self.total_cnt_phs_obs_hi.append( struct.unpack('>I', sfdu_block[206+i*22:206+i*22+4])[0] )

         # total_cnt_phs_obs_lo: UnsignedMSB4
         self.total_cnt_phs_obs_lo.append( struct.unpack('>I', sfdu_block[210+i*22:210+i*22+4])[0] )

         # total_cnt_phs_obs_frac: UnsignedMSB4
         self.total_cnt_phs_obs_frac.append( struct.unpack('>I', sfdu_block[214+i*22:214+i*22+4])[0] )

         # total_cnt_phs_prefit_resid: IEEE754MSBSingle
         self.total_cnt_phs_prefit_resid.append( struct.unpack('>f', sfdu_block[218+i*22:218+i*22+4])[0] )

         # total_cnt_phs_prefit_resid_vld_flag: UnsignedByte
         self.total_cnt_phs_prefit_resid_vld_flag.append( struct.unpack('>B', sfdu_block[222+i*22:222+i*22+1])[0] )

         # total_cnt_phs_prefit_resid_tol_flag: UnsignedByte
         self.total_cnt_phs_prefit_resid_tol_flag.append( struct.unpack('>B', sfdu_block[223+i*22:223+i*22+1])[0] )

         # reserve4: UnsignedMSB4
         self.reserve4.append( sfdu_block[224+i*22:224+i*22+4] )

         # reserve8: UnsignedMSB8
         self.reserve8.append( sfdu_block[228+i*22:228+i*22+8] )

# ---------------------------------------------------------------------------
